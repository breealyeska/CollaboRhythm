<?xml version="1.0"?>
<!---
 - Copyright 2013 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:view="collaboRhythm.plugins.bloodPressure.view.*"
						   backgroundAlpha="0.3"
						   backgroundColor="0x000000"
						   width="100%" height="100%">
	<fx:Declarations>
		<s:ColorMatrixFilter id="grayScaleFilter"
							 matrix="0.3, 0.59, 0.11, 0, 0, 0.3, 0.59, 0.11, 0, 0,	0.3, 0.59, 0.11, 0, 0, 0, 0, 0, 1, 0"/>
	</fx:Declarations>
	<fx:Style>
		.agreeLabel {
			fontSize: 21;
			color: #F3F3F3;
		}

		.disagreeLabel {
			fontSize: 21;
			color: #37B6E1;
		}

		#selectionsMessageLabel {
			fontSize: 30;
			fontWeight: bold;
			color: #F3F3F3;
		}

		.buttonInstructions {
			fontSize: 16;
			color: #F3F3F3;
		}

		.proceedButtons {
			fontSize: 16;
			fontWeight: normal;
			color: #F3F3F3;
			textShadowAlpha: 0;
		}

	</fx:Style>
	<s:Group minWidth="750" verticalCenter="0" horizontalCenter="0">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0x282828"/>
			</s:fill>
		</s:Rect>
		<s:VGroup gap="0" width="100%" horizontalAlign="center">
			<s:VGroup gap="0" width="100%" horizontalAlign="center">
				<s:HGroup width="100%" height="54" verticalAlign="middle" horizontalAlign="center">
					<view:WarningIcon width="40" height="35" filters="{[grayScaleFilter]}" visible="{!_model.selectionsAgreeWithSystem}" includeInLayout="{!_model.selectionsAgreeWithSystem}"/>
					<s:Label text="{_model.headerMessage}" styleName="{_model.selectionsAgreeWithSystem ? 'agreeLabel' : 'disagreeLabel'}"/>
				</s:HGroup>
				<s:Line width="100%" visible="{!_model.selectionsAgreeWithSystem}" includeInLayout="{!_model.selectionsAgreeWithSystem}">
					<s:stroke>
						<s:SolidColorStroke color="0x38B6E1"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
			<s:Spacer width="100%" height="50"/>
			<s:Label id="selectionsMessageLabel" textAlign="center" text="{_model.selectionsMessage}"/>
			<s:Spacer width="100%" height="60"/>
			<s:Label styleName="buttonInstructions"
					 text="Propose will save your changes as annotations for you and others to view and discuss."/>
			<s:Label styleName="buttonInstructions"
					 text="Finalize will commit your changes and clear all of the annotations."/>
			<s:Spacer width="100%" height="20"/>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0x444444"/>
				</s:stroke>
			</s:Line>
			<s:HGroup width="100%">
				<s:Button id="proposeButton" label="Propose" width="100%" height="50"
						  skinClass="spark.skins.mobile.TransparentActionButtonSkin"
						  styleName="proceedButtons" click="proposeButton_clickHandler(event)"/>
				<s:Button id="finalizeButton" label="Finalize" width="100%" height="50"
						  skinClass="spark.skins.mobile.TransparentActionButtonSkin"
						  styleName="proceedButtons" click="finalizeButton_clickHandler(event)"/>
				<s:Button id="cancelButton" label="Cancel" width="100%" height="50"
						  click="cancelButton_clickHandler(event)"
						  skinClass="spark.skins.mobile.TransparentActionButtonSkin" styleName="proceedButtons"/>
			</s:HGroup>
		</s:VGroup>
	</s:Group>

	<fx:Script><![CDATA[
		import collaboRhythm.plugins.bloodPressure.model.ConfirmChangePopUpModel;

		[Bindable]
		private var _model:ConfirmChangePopUpModel;

		public function set model(model:ConfirmChangePopUpModel):void
		{
			_model = model;
		}

		private function proposeButton_clickHandler(event:MouseEvent):void
		{
			this.close(true);
		}

		private function finalizeButton_clickHandler(event:MouseEvent):void
		{
			_model.shouldFinalize = true;
			this.close(true);
		}

		private function cancelButton_clickHandler(event:MouseEvent):void
		{
			this.close();
		}
		]]></fx:Script>
</s:SkinnablePopUpContainer>
