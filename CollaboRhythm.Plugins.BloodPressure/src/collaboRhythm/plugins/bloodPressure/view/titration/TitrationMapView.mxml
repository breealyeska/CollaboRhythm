<?xml version="1.0"?>
<!---
  - Copyright 2013 John Moore, Scott Gilroy
  -
  - This file is part of CollaboRhythm.
  -
  - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  - version.
  -
  - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  - details.
  -
  - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  - <http://www.gnu.org/licenses/>.
  -->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		creationComplete="creationCompleteHandler(event)"
		resize="resizeHandler(event)">
	<fx:Style>
		.extremesLabels {
			font-size: 36;
			color: #939598;
		}
	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.bloodPressure.controller.titration.HypertensionMedicationTitrationAppController;
		import collaboRhythm.plugins.bloodPressure.model.titration.HypertensionMedicationAlternatePair;
		import collaboRhythm.plugins.bloodPressure.model.titration.HypertensionMedicationTitrationModel;

		import mx.core.IVisualElement;
		import mx.events.FlexEvent;
		import mx.events.ResizeEvent;

		private static const MEDICATION_PAIRS_GAP_MIN:int = 5;
		private static const MEDICATION_PAIRS_GAP_MAX:int = 140;

		[Bindable]
		private var _controller:HypertensionMedicationTitrationAppController;
		[Bindable]
		private var _model:HypertensionMedicationTitrationModel;

		public function set controller(value:HypertensionMedicationTitrationAppController):void
		{
			_controller = value as HypertensionMedicationTitrationAppController;
			_model = _controller.model;
			createAlternatePairs();
		}

		override protected function createChildren():void
		{
			super.createChildren();
			createAlternatePairs();
		}

		private function creationCompleteHandler(event:FlexEvent):void
		{
			createAlternatePairs();
		}

		private function createHypertensionMedicationAlternatePairView(hypertensionMedicationAlternatePair:HypertensionMedicationAlternatePair,
																	   nextPair:HypertensionMedicationAlternatePair):void
		{
			var hypertensionMedicationAlternatePairView:HypertensionMedicationAlternatePairView = new HypertensionMedicationAlternatePairView();
			hypertensionMedicationAlternatePairView.init(hypertensionMedicationAlternatePair,
					hypertensionMedicationsVGroup.gap, nextPair);
			addEventListener(HypertensionMedicationViewEvent.DOSE_SELECTED,
					hypertensionMedicationViewEvent_doseSelectedHandler);
			addEventListener(HypertensionMedicationAlternatePairViewEvent.ALTERNATE_SELECTED,
					hypertensionMedicationViewEvent_alternateSelectedHandler);

			hypertensionMedicationsVGroup.addElement(hypertensionMedicationAlternatePairView);
		}

		private function hypertensionMedicationViewEvent_doseSelectedHandler(event:HypertensionMedicationViewEvent):void
		{
			_controller.handleHypertensionMedicationDoseSelected(event.hypertensionMedication, event.doseSelected,
					event.altKey, event.ctrlKey);
		}

		private function hypertensionMedicationViewEvent_alternateSelectedHandler(event:HypertensionMedicationAlternatePairViewEvent):void
		{
			_controller.handleHypertensionMedicationAlternateSelected(event.hypertensionMedicationAlternatePair,
					event.altKey, event.ctrlKey);
		}

		private function saveButton_clickHandler(event:MouseEvent):void
		{
			_controller.save();
		}

		private function createAlternatePairs():void
		{
			if (_model && hypertensionMedicationsVGroup.numElements == 0)
			{
				for (var i:int = 0; i < _model.hypertensionMedicationAlternatePairsVector.length; i++)
				{
					var hypertensionMedicationAlternatePair:HypertensionMedicationAlternatePair =
							_model.hypertensionMedicationAlternatePairsVector[i];
					var nextPair:HypertensionMedicationAlternatePair = i + 1 <
							_model.hypertensionMedicationAlternatePairsVector.length ?
							_model.hypertensionMedicationAlternatePairsVector[i + 1] : null;
					createHypertensionMedicationAlternatePairView(hypertensionMedicationAlternatePair, nextPair);
				}
			}
		}

		private function resizeHandler(event:ResizeEvent):void
		{
			updateLayout();
		}

		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			super.updateDisplayList(unscaledWidth, unscaledHeight);
			updateLayout();
		}

		override protected function childrenCreated():void
		{
			super.childrenCreated();
			updateLayout();
		}

		private function updateLayout():void
		{
			if (hypertensionMedicationsVGroup && hypertensionMedicationsVGroup.numElements > 0 && parent)
			{
				var numPairs:int = hypertensionMedicationsVGroup.numElements;
				var firstPairView:IVisualElement = hypertensionMedicationsVGroup.getElementAt(0);
				var gap:Number = (parent.height - (numPairs * firstPairView.height) - startLabelGroup.height) /
						(numPairs - 1);
				gap = Math.max(MEDICATION_PAIRS_GAP_MIN, Math.min(gap, MEDICATION_PAIRS_GAP_MAX));
				hypertensionMedicationsVGroup.gap = gap;

				for (var i:int = 0; i < numPairs; i++)
				{
					(hypertensionMedicationsVGroup.getElementAt(i) as
							HypertensionMedicationAlternatePairView).nextPairGap = gap;
				}
			}
		}
		]]>
	</fx:Script>
	<s:VGroup id="hypertensionMedicationsVGroup" width="50%" top="20" gap="{MEDICATION_PAIRS_GAP_MIN}">
		<!-- medications get added here dynamically -->
	</s:VGroup>
	<s:Group includeInLayout="false">
		<s:Label text="Max" styleName="extremesLabels" x="456" mouseEnabled="false"/>
	</s:Group>
	<s:Group id="startLabelGroup">
		<s:Label text="Start" styleName="extremesLabels" x="456" mouseEnabled="false"/>
	</s:Group>
</s:VGroup>
