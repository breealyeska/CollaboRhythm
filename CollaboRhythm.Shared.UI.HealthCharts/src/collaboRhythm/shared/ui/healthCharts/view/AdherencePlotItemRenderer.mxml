<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:controls="com.dougmccune.controls.*"
				xmlns:images="assets.images.*" xmlns:sharedView="collaboRhythm.plugins.schedule.shared.view.*"
				autoDrawBackground="false"
				creationComplete="creationCompleteHandler(event)"
				click="clickHandler(event)"
		>
	<s:layout>
		<controls:ChildIndependentLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
		import castle.flexbridge.reflection.ReflectionUtils;

		import collaboRhythm.shared.apps.healthCharts.model.HealthChartsEvent;

		import collaboRhythm.shared.model.healthRecord.CollaboRhythmValueAndUnit;

		import collaboRhythm.shared.model.healthRecord.document.AdherenceItem;
		import collaboRhythm.shared.model.healthRecord.document.MedicationAdministration;
		import collaboRhythm.shared.model.healthRecord.document.MedicationScheduleItem;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemBase;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;
		import collaboRhythm.shared.ui.healthCharts.model.AdherenceStripItemProxy;
		import collaboRhythm.shared.ui.healthCharts.model.HealthChartsScheduleItemEvent;

		import mx.charts.series.items.PlotSeriesItem;
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.core.UIComponent;
		import mx.events.FlexEvent;

		import assets.images.check;

		import mx.events.PropertyChangeEvent;

		override public function set data(value:Object):void
		{
			super.data = value;
			updateImageVisible();
		}

		protected function creationCompleteHandler(event:FlexEvent):void
		{
			updateImageVisible();
		}

		private function updateImageVisible():void
		{
			var adherenceStripItemProxy:AdherenceStripItemProxy = (data as PlotSeriesItem).item as
					AdherenceStripItemProxy;
			if (adherenceStripItemProxy == null)
				throw new Error("data.item of renderer is a " +
						ReflectionUtils.getClassInfo(ReflectionUtils.getClass(data)).name +
						"; expected AdherenceStripItemProxy");

			var adherenceItem:AdherenceItem = adherenceStripItemProxy.adherenceItem;
			var doseLabelText:String = "";

			var medicationAdministration:MedicationAdministration = adherenceItem && adherenceItem.adherenceResults &&
					adherenceItem.adherenceResults.length >
							0 ? adherenceItem.adherenceResults[0] as MedicationAdministration : null;
			var doseValueAndUnit:CollaboRhythmValueAndUnit;
			if (medicationAdministration && medicationAdministration.amountAdministered)
			{
				doseValueAndUnit = medicationAdministration.amountAdministered;
			}
			else if (adherenceStripItemProxy.scheduleItemOccurrence)
			{
				var medicationScheduleItem:MedicationScheduleItem = adherenceStripItemProxy.scheduleItemOccurrence.scheduleItem as
						MedicationScheduleItem;
				doseValueAndUnit = medicationScheduleItem ? medicationScheduleItem.dose : null;
			}

			if (doseValueAndUnit && doseValueAndUnit.value != "1")
			{
				doseLabelText = doseValueAndUnit.value;
			} else
			{
				doseLabelText = "";
			}

			var adherence:Boolean = false;
			if (adherenceItem)
			{
				if (adherenceItem.adherence)
				{
					yesImage.visible = true;
					noImage.visible = false;
					unreportedImage.visible = false;
					adherence = true;
				}
				else
				{
					yesImage.visible = false;
					noImage.visible = true;
					unreportedImage.visible = false;
				}
			}
			else
			{
				yesImage.visible = false;
				noImage.visible = false;
				unreportedImage.visible = adherenceStripItemProxy.isEndBeforeCurrentDate;
			}

			doseLabel.setStyle("color", adherence ? 0xFFFFFF : adherenceStripItemProxy.color);
			doseGlow.color = adherence ? adherenceStripItemProxy.color : 0xFFFFFF;
			doseLabel.text = doseLabelText;
		}

		private function findMask():void
		{
			trace("Searching for mask......");
			var component:UIComponent = this;
			var ancestorStack:Array = new Array();
			var depth:int = 0;
			while (component)
			{
				if (component.mask)
				{
					trace("Mask ---))))))))))))) " + depth + " deep on " + component + " " + component.id);
					component.mask = null;
				}
				ancestorStack.unshift(component);
				component = component.parent as UIComponent;
				depth++;
			}
		}

		private function clickHandler(event:MouseEvent):void
		{
			if (event.ctrlKey)
			{
				var adherenceStripItemProxy:AdherenceStripItemProxy = (data as PlotSeriesItem).item as
						AdherenceStripItemProxy;
				if (adherenceStripItemProxy == null)
					throw new Error("data.item of renderer is a " +
							ReflectionUtils.getClassInfo(ReflectionUtils.getClass(data)).name +
							"; expected AdherenceStripItemProxy");

				dispatchEvent(new HealthChartsScheduleItemEvent(HealthChartsScheduleItemEvent.TOGGLE_ADHERENCE,
						adherenceStripItemProxy.scheduleItemOccurrence));

				adherenceStripItemProxy.scheduleItemOccurrence.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,
						scheduleItemOccurrence_propertyChangeHandler, false, 0, true);
			}
		}

		private function scheduleItemOccurrence_propertyChangeHandler(event:PropertyChangeEvent):void
		{
			var scheduleItemOccurrence:ScheduleItemOccurrence = event.target as ScheduleItemOccurrence;

			if (event.property == "adherenceItem")
			{
				scheduleItemOccurrence.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE,
						scheduleItemOccurrence_propertyChangeHandler);
				var adherenceStripItemProxy:AdherenceStripItemProxy = (data as PlotSeriesItem).item as
						AdherenceStripItemProxy;
				adherenceStripItemProxy.update();
				updateImageVisible();
			}
		}
		]]>
	</fx:Script>

	<!-- Align the bottom point of the yesImage (check mark) with the data point by offsetting the horizontalCenter -->
	<sharedView:AdherenceCheck id="yesImage" width="26.53" height="28.057" horizontalCenter="3" verticalCenter="0"/>
	<s:Label id="unreportedImage" text="?" fontSize="36" fontWeight="bold" color="#ED1C24" horizontalCenter="0" verticalCenter="3"/>
	<s:Label id="noImage" text="X" fontSize="36" fontWeight="bold" color="#ED1C24" horizontalCenter="0" verticalCenter="3"/>
	<s:Label id="doseLabel" fontSize="18" fontWeight="bold" horizontalCenter="0" y="{-34}" color="0xFFFFFF" mouseEnabled="false" alpha="0.5">
		<s:filters>
			<s:GlowFilter id="doseGlow" blurX="8" blurY="8" color="0x2BA28E" quality="2" strength="4"/>
		</s:filters>
	</s:Label>
</s:ItemRenderer>
