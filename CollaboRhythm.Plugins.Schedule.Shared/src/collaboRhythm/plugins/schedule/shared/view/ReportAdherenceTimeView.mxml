<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark" xmlns:view="collaboRhythm.plugins.schedule.shared.view.*"
		  currentState="dateLabel"
		  baselinePositionElement="{timeValueGroup}">
	<s:states>
		<s:State name="dateLabel"/>
		<s:State name="dateSpinner"/>
	</s:states>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="M-dd-yyyy"/>
		<s:DateTimeFormatter id="timeFormatter" dateTimePattern="h : mm  a"/>
	</fx:Declarations>
	<fx:Style>
		#reportTimeMeasuredStartLabel {
			fontSize: 40;
		}

		#dateMeasuredStartSpinner {
			fontSize: 40;
		}
	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionInputController;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionInputModel;
		import collaboRhythm.shared.model.services.DateUtil;
		import collaboRhythm.shared.model.services.ICurrentDateSource;
		import collaboRhythm.shared.model.services.WorkstationKernel;

		import mx.binding.utils.BindingUtils;

		import spark.components.SpinnerListContainer;

		[Bindable]
		private var _dataInputModel:IHealthActionInputModel;
		private var _dataInputController:IHealthActionInputController;
		private var _currentDateSource:ICurrentDateSource;
		private var _propertiesChanged:Boolean;

		public function init(dataInputModel:IHealthActionInputModel,
							 dataInputController:IHealthActionInputController):void
		{
			_dataInputModel = dataInputModel;
			_dataInputController = dataInputController;
			_currentDateSource = WorkstationKernel.instance.resolve(ICurrentDateSource) as ICurrentDateSource;
			currentState = "dateLabel";
			propertiesChanged = true;
		}

		override protected function createChildren():void
		{
			super.createChildren();
			propertiesChanged = true;
		}

		override protected function stateChanged(oldState:String, newState:String, recursive:Boolean):void
		{
			super.stateChanged(oldState, newState, recursive);
			propertiesChanged = true;
		}

		override protected function commitProperties():void
		{
			super.commitProperties();
			if (propertiesChanged)
			{
				updateChildren();
				propertiesChanged = false;
			}
		}

		private function setDateMeasuredStart(dateMeasuredStart:Date):void
		{
			if (currentState == "dateSpinner")
			{
				dateMeasuredStartSpinner.selectedDate = dateMeasuredStart;
			}
			else if (currentState == "dateLabel")
			{
				updateDateTimeLabels(dateMeasuredStart);
			}
		}

		private function changeTimeButton_clickHandler():void
		{
			if (currentState == "dateLabel")
			{
				currentState = "dateSpinner";
				dateMeasuredStartSpinner.selectedDate = _dataInputModel.dateMeasuredStart;
			}
			else if (currentState == "dateSpinner")
			{
				currentState = "dateLabel";
				_dataInputController.updateDateMeasuredStart(_currentDateSource.now());
			}
		}

		private function dateMeasuredStartSpinner_changeHandler():void
		{
			_dataInputController.updateDateMeasuredStart(dateMeasuredStartSpinner.selectedDate);
		}

		private function updateDateTimeLabels(dateMeasuredStart:Date):void
		{
			if (DateUtil.isDateToday(dateMeasuredStart, _currentDateSource.now()))
			{
				reportDateMeasuredStartLabel.text = "Today";
			}
			else if (DateUtil.isDateYesterday(dateMeasuredStart, _currentDateSource.now()))
			{
				reportDateMeasuredStartLabel.text = "Yesterday";
			}
			else
			{
				reportDateMeasuredStartLabel.text = dateFormatter.format(dateMeasuredStart);
			}
			reportTimeMeasuredStartLabel.text = timeFormatter.format(dateMeasuredStart);
		}

		private function updateChildren():void
		{
			if (_dataInputModel)
			{
				if (reportDateMeasuredStartLabel && reportTimeMeasuredStartLabel)
				{
					if (_dataInputModel.scheduleItemOccurrence && _dataInputModel.scheduleItemOccurrence.adherenceItem)
					{
						updateDateTimeLabels(_dataInputModel.adherenceResultDate);
					}
					else
					{
						updateDateTimeLabels(_dataInputModel.dateMeasuredStart);
						BindingUtils.bindSetter(setDateMeasuredStart, _dataInputModel, "dateMeasuredStart");
					}
				}
			}
		}

		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			super.updateDisplayList(unscaledWidth, unscaledHeight);

			if (_dataInputModel)
			{
				var includeChangeTimeButton:Boolean = true;

				if (reportDateMeasuredStartLabel && reportTimeMeasuredStartLabel)
				{
					if (_dataInputModel.scheduleItemOccurrence && _dataInputModel.scheduleItemOccurrence.adherenceItem)
					{
						includeChangeTimeButton = false;
					}
				}

				if (!_dataInputModel.isChangeTimeAllowed)
				{
					includeChangeTimeButton = false;
				}

				if (changeTimeGroup && dateMeasuredStartSpinner && timeValueGroup)
				{
					if (includeChangeTimeButton || currentState == "dateSpinner")
					{
						dateMeasuredStartSpinner.includeInLayout = true;
						timeValueGroup.y = dateMeasuredStartSpinner.y + dateMeasuredStartSpinner.baselinePosition -
								timeValueGroup.baselinePosition;
						changeTimeGroup.x = dateMeasuredStartSpinner.x + dateMeasuredStartSpinner.width + 15;
					}
					else
					{
						dateMeasuredStartSpinner.includeInLayout = false;
						timeValueGroup.y = 0;
						changeTimeGroup.x = timeValueGroup.x + timeValueGroup.width + 15;
					}

					changeTimeGroup.y = Math.round(timeValueGroup.y + timeValueGroup.height / 2 -
							changeTimeGroup.height / 2);
				}

				if (changeTimeGroup)
				{
					changeTimeGroup.visible = changeTimeGroup.includeInLayout = includeChangeTimeButton;
				}

				if (changeTimeButton)
				{
					if (_dataInputModel.healthActionModelDetailsProvider.accountId ==
							_dataInputModel.healthActionModelDetailsProvider.activeAccount.accountId)
					{
						changeTimeButton.enabled = true;
					}
				}
			}

		}

		public function get propertiesChanged():Boolean
		{
			return _propertiesChanged;
		}

		public function set propertiesChanged(value:Boolean):void
		{
			_propertiesChanged = value;
			if (propertiesChanged)
			{
				invalidateProperties();
				invalidateDisplayList();
			}
		}
		]]></fx:Script>
	<s:Group id="timeValueGroup" width="240" baselinePositionElement="{reportTimeMeasuredStartLabel}" visible.dateSpinner="false">
		<s:layout>
			<s:VerticalLayout paddingRight="10" paddingTop="6" horizontalAlign="right"/>
		</s:layout>
		<s:Label id="reportDateMeasuredStartLabel"/>
		<s:Label id="reportTimeMeasuredStartLabel"/>
		<s:Label id="spacerLabel"/>
	</s:Group>
	<view:DateSpinnerEx id="dateMeasuredStartSpinner" displayMode="time" x="{timeValueGroup.x + timeValueGroup.width - dateMeasuredStartSpinner.width}"
			   change="dateMeasuredStartSpinner_changeHandler()" visible.dateLabel="false"/>
	<s:Group id="changeTimeGroup" baselinePositionElement="{changeTimeButton}">
		<s:Button id="changeTimeButton" label.dateLabel="Change Time" label.dateSpinner="Default Time"
			  click="changeTimeButton_clickHandler()" enabled="false"/>
		<!--Include an invisible button with a fixed label that is slightly longer so that the size of this view is static-->
		<s:Button id="invisibleSpacerButton" label="Default Time+" visible="false"/>
	</s:Group>
</s:Group>
