<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark">
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.schedule.shared.model.IScheduleCollectionsProvider;
		import collaboRhythm.plugins.schedule.shared.model.ScheduleGroup;

		import com.leebrimelow.drawing.Wedge;

		import spark.primitives.Graphic;

		private var _scheduleGroupsCollectionsProvider:IScheduleCollectionsProvider;
		private var _dateStart:Date;
		private var _dateEnd:Date;

		public function init(scheduleGroupsCollectionsProvider:IScheduleCollectionsProvider, dateStart:Date,
							 dateEnd:Date):void
		{
			_scheduleGroupsCollectionsProvider = scheduleGroupsCollectionsProvider;
			_dateStart = dateStart;
			_dateEnd = dateEnd;

			if (initialized)
				drawScheduleGroups();
		}

		override protected function createChildren():void
		{
			super.createChildren();
			drawScheduleGroups();
		}

		private function drawScheduleGroups():void
		{
			scheduleGroups.removeAllElements();
			if (_scheduleGroupsCollectionsProvider)
			{
				for each (var scheduleGroup:ScheduleGroup in
						_scheduleGroupsCollectionsProvider.scheduleGroupsCollection)
				{
					var startAngle:Number = calculateAngleFromDate(scheduleGroup.dateStart);
					var endAngle:Number = calculateAngleFromDate(scheduleGroup.dateEnd);

					// TODO: render and evaluate the schedule groups from the same date as the date (not just time) of the schedule item occurrence
					var selected:Boolean = timesAreEqual(_dateStart, scheduleGroup.dateStart) && timesAreEqual(_dateEnd, scheduleGroup.dateEnd);

					drawScheduleGroup(startAngle, endAngle, selected);
				}
			}
		}

		private static function timesAreEqual(date1:Date, date2:Date):Boolean
		{
			return (date1 != null && date2 != null && date1.hours == date2.hours && date1.minutes == date2.minutes &&
					date1.seconds == date2.seconds && date1.milliseconds == date2.milliseconds);
		}

		private function drawScheduleGroup(startAngle:Number, endAngle:Number, selected:Boolean):void
		{
			var arc:Number = endAngle - startAngle;

			var scheduleGroupWedge:Graphic = new Graphic();
			scheduleGroupWedge.percentWidth = 100;
			scheduleGroupWedge.percentHeight = 100;
			scheduleGroupWedge.graphics.clear();
			if (selected)
			{
				scheduleGroupWedge.graphics.beginFill(0x2EB5E4, 0.8);
			}
			else
			{
				scheduleGroupWedge.graphics.beginFill(0xFFFFFF, 0.5);
			}
			Wedge.draw(scheduleGroupWedge, width / 2, width / 2, width / 2 - 1, arc, startAngle - 90);
			scheduleGroupWedge.graphics.endFill();

			scheduleGroups.addElement(scheduleGroupWedge);
		}

		private function calculateAngleFromDate(date:Date):Number
		{
			return 15 * date.hours + 0.25 * date.minutes;
		}
		]]></fx:Script>
	<s:Ellipse width="98%" height="98%">
		<s:fill>
			<s:SolidColor color="0xC0BEBE"/>
		</s:fill>
	</s:Ellipse>
	<s:Group id="scheduleGroups" width="100%" height="100%"/>
	<s:Ellipse width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x6D6E71"/>
		</s:stroke>
	</s:Ellipse>
</s:Group>
