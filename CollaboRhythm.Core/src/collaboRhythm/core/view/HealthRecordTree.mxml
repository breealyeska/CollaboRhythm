<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="collaboRhythm.core.view.*"
		 width="100%"
		 height="100%">
	<view:AdvancedDataGridFixed id="healthRecordTree"
		width="100%"
		height="100%"
		displayItemsExpanded="false">
		<view:columns>
			<mx:AdvancedDataGridColumn headerText="Name" labelFunction="nameLabelFunction" sortCompareFunction="nameSortCompareFunction"/>
			<mx:AdvancedDataGridColumn headerText="Type" labelFunction="typeLabelFunction"/>
			<mx:AdvancedDataGridColumn headerText="Count" labelFunction="countLabelFunction"/>
			<mx:AdvancedDataGridColumn headerText="Date Start" labelFunction="dateStartLabelFunction" sortCompareFunction="dateStartSortCompareFunction"/>
			<mx:AdvancedDataGridColumn headerText="Date End" labelFunction="dateEndLabelFunction"/>
			<mx:AdvancedDataGridColumn headerText="Date Created" labelFunction="dateCreatedLabelFunction"/>
			<mx:AdvancedDataGridColumn headerText="Relates To" labelFunction="relatesToLabelFunction"/>
			<mx:AdvancedDataGridColumn headerText="Related From" labelFunction="relatedFromLabelFunction"/>
		</view:columns>
	</view:AdvancedDataGridFixed>
	<fx:Script><![CDATA[
		import collaboRhythm.core.model.HierarchicalCollectionViewEx;
		import collaboRhythm.core.model.HierarchicalCollectionViewFixed;
		import collaboRhythm.shared.model.Record;
		import collaboRhythm.shared.model.healthRecord.CodedValue;
		import collaboRhythm.shared.model.healthRecord.CollaboRhythmCodedValue;
		import collaboRhythm.shared.model.healthRecord.IDocument;
		import collaboRhythm.shared.model.healthRecord.IDocumentCollection;
		import collaboRhythm.shared.model.healthRecord.Relationship;

		import mx.collections.ArrayCollection;
		import mx.collections.HierarchicalCollectionView;

		import mx.collections.HierarchicalData;
		import mx.collections.IHierarchicalCollectionView;
		import mx.collections.Sort;
		import mx.collections.SortField;
		import mx.utils.ObjectUtil;
		import mx.utils.StringUtil;

		private var _recordHierarchy:HierarchicalData;
		private var _record:Record;
		private var hierarchicalCollectionView:IHierarchicalCollectionView;

		override protected function createChildren():void
		{
			super.createChildren();
			updateHierarchicalCollectionView();
		}

		private function nameLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			var documentCollection:IDocumentCollection = item as IDocumentCollection;
			if (documentCollection)
			{
				return documentCollection.documentShortType;
			}
			else
			{
				var document:IDocument = item as IDocument;
				if (document)
				{
					return getDocumentName(document);
				}
				else
				{
					var relationship:Relationship = item as Relationship;
					if (relationship)
					{
						return relationship.shortType;
					}
				}
			}
			return null;
		}

		private function nameSortCompareFunction(obj1:Object, obj2:Object):int
		{
			return defaultSortCompareFunction(obj1, obj2);
		}

		private function defaultSortCompareFunction(obj1:Object, obj2:Object, fields:Array = null):int
		{
			var documentCollection1:IDocumentCollection = obj1 as IDocumentCollection;
			if (documentCollection1)
			{
				var documentCollection2:IDocumentCollection = obj2 as IDocumentCollection;
				return ObjectUtil.stringCompare(documentCollection1.documentShortType,
						documentCollection2.documentShortType);
			}
			else
			{
				var document1:IDocument = obj1 as IDocument;
				if (document1)
				{
					var document2:IDocument = obj2 as IDocument;
					return ObjectUtil.stringCompare(getDocumentName(document1), getDocumentName(document2));
				}
				else
				{
					var relationship1:Relationship = obj1 as Relationship;
					if (relationship1)
					{
						var relationship2:Relationship = obj2 as Relationship;
						return ObjectUtil.stringCompare(relationship1.shortType, relationship2.shortType);
					}
				}
			}
			return 0;
		}

		private function typeLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			var documentCollection:IDocumentCollection = item as IDocumentCollection;
			if (documentCollection)
			{
				return "Collection";
			}
			else
			{
				var document:IDocument = item as IDocument;
				if (document)
				{
					return document.meta.shortType;
				}
				else
				{
					var relationship:Relationship = item as Relationship;
					if (relationship)
					{
						return "Relationship";
					}
				}
			}
			return null;
		}

		private function countLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			var documentCollection:IDocumentCollection = item as IDocumentCollection;
			if (documentCollection)
			{
				return documentCollection.documents.length.toString();
			}
			return null;
		}

		private static const dateStartPropertyNames:Array = ["date", "dateStart", "dateMeasuredStart", "dateOrdered", "dateOnset", "dateReported", "dateFilled", "dateRecorded"];

		private function dateStartLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			var document:IDocument = item as IDocument;
			if (document)
			{
				var propertyNames:Array = dateStartPropertyNames;
				return getDateLocaleString(propertyNames, document);
			}
			return null;
		}

		private function dateStartSortCompareFunction(obj1:Object, obj2:Object, fields:Array = null):int
		{
			var document1:IDocument = obj1 as IDocument;
			if (document1)
			{
				var document2:IDocument = obj2 as IDocument;
				return getDateValue(dateStartPropertyNames, document1) -
						getDateValue(dateStartPropertyNames, document2);
			}
			return 0;
		}

		private function getDateValue(propertyNames:Array, document:IDocument):Number
		{
			var date:Date = getDate(propertyNames, document);
			return date ? date.valueOf() : NaN;
		}

		private function dateEndLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			var document:IDocument = item as IDocument;
			if (document)
			{
				var propertyNames:Array = ["dateEnd", "dateMeasuredEnd", "dateExpires", "dateResolution", "dateAdministered", "dateSent"];
				return getDateLocaleString(propertyNames, document);
			}
			return null;
		}

		private function dateCreatedLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			var document:IDocument = item as IDocument;
			if (document)
			{
				return document.meta.createdAt.toLocaleString();
			}
			return null;
		}

		private function relatesToLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			var document:IDocument = item as IDocument;
			if (document)
			{
				return document.relatesTo.length.toString();
			}
			return null;
		}

		private function relatedFromLabelFunction(item:Object, column:AdvancedDataGridColumn):String
		{
			var document:IDocument = item as IDocument;
			if (document)
			{
				return document.isRelatedFrom.length.toString();
			}
			return null;
		}

		[Bindable]
		public function get record():Record
		{
			return _record;
		}

		public function set record(value:Record):void
		{
			_record = value;
		}

		private function getDateLocaleString(propertyNames:Array, document:IDocument):String
		{
			var date:Date = getDate(propertyNames, document);
			return date ? date.toLocaleString() : null;
		}

		public function get selectedDocument():IDocument
		{
			return healthRecordTree.selectedItem ? healthRecordTree.selectedItem as IDocument : null;
		}

		private function getDocumentName(document:IDocument):String
		{
			var name:String = null;
			if ((document as Object).hasOwnProperty("name"))
			{
				var documentName:Object = document["name"];
				var documentNameCodedValue:CollaboRhythmCodedValue = documentName as CollaboRhythmCodedValue;
				if (documentNameCodedValue)
				{
					name = documentNameCodedValue.text;
				}
				else
				{
					name = documentName ? documentName.toString() : null;
				}
			}
			return name;
		}

		private function updateHierarchicalCollectionView():void
		{
			var hierarchicalData:HierarchicalData = new HierarchicalData(record.documentCollections.values());
			hierarchicalData.childrenField = "documents";
			hierarchicalCollectionView = new HierarchicalCollectionViewFixed(hierarchicalData);
			hierarchicalCollectionView.sort = new Sort();
			hierarchicalCollectionView.sort.compareFunction = defaultSortCompareFunction;
			hierarchicalCollectionView.sort.fields = [];
			hierarchicalCollectionView.refresh();
			healthRecordTree.dataProvider = hierarchicalCollectionView;
			healthRecordTree.hierarchicalCollectionView = hierarchicalCollectionView;
		}

		private function getDate(propertyNames:Array, document:IDocument):Date
		{
			var date:Date;
			for each (var propertyName:String in propertyNames)
			{
				if ((document as Object).hasOwnProperty(propertyName))
				{
					date = document[propertyName] as Date;
					break;
				}
			}
			return date;
		}
		]]></fx:Script>
</s:Group>
