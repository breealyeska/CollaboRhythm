<?xml version="1.0"?>
<!---
  - Copyright 2014 John Moore, Scott Gilroy, Bree Alyeska
  -
  - This file is part of CollaboRhythm.
  -
  - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  - version.
  -
  - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  - details.
  -
  - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  - <http://www.gnu.org/licenses/>.
  -->

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="collaboRhythm.core.view.*"
         hideEffect="{hideEffect}"
         showEffect="{showEffect}"
         height="100%" width="100%"
         resize="resizeHandler(event)">
  <s:states>
    <s:State name="connectInProgress"/>
    <s:State name="connectFailed"/>
    <s:State name="connectionErrorsSaving"/>
    <s:State name="unexpectedErrorsSaving"/>
  </s:states>
  <fx:Metadata>
    [Event(name="retry", type="collaboRhythm.core.view.ConnectivityEvent")]
    [Event(name="quit", type="collaboRhythm.core.view.ConnectivityEvent")]
    [Event(name="ignore", type="collaboRhythm.core.view.ConnectivityEvent")]
  </fx:Metadata>
  <fx:Declarations>
    <!--Note that we are using Animate and SimpleMotionPath instead of Resize effects because Resize causes the
	width to get set explicitly and thus causes problems when resizing (such as when the device is rotated).-->
    <s:Animate id="detailsShowEffect" target="detailsTextArea">
      <s:motionPaths>
        <s:SimpleMotionPath property="height" valueTo="{DETAILS_TEXT_AREA_HEIGHT}"/>
      </s:motionPaths>
    </s:Animate>
    <s:Animate id="detailsHideEffect" target="detailsTextArea">
      <s:motionPaths>
        <s:SimpleMotionPath property="height" valueTo="0"/>
      </s:motionPaths>
    </s:Animate>
    <!--<s:Resize id="detailsHideEffect" target="detailsTextArea" heightTo="0"/>-->
    <s:Fade id="hideEffect" target="this" alphaFrom="1" alphaTo="0"/>
    <s:Fade id="showEffect" target="this" alphaFrom="0" alphaTo="1" duration="100"/>
  </fx:Declarations>
  <fx:Style>
    @namespace s "library://ns.adobe.com/flex/spark";

    .connectivityText {
      color: #FFFFFF;
      lineBreak: "toFit";
      textAlign: "center";
    }

    @media (application-dpi: 320) {
      .connectivityText {
        font-size: 40;
      }
    }

    @media (application-dpi: 240) {
      .connectivityText {
        font-size: 32;
      }
    }

    @media (application-dpi: 160) {
      .connectivityText {
        font-size: 24;
      }
    }

    .connectivityDetailsText {
      contentBackgroundAlpha: 0;
      color: #FFFFFF;
      /*font-size: 16;*/
    }

    s|ToggleButton #showDetailsButton {
      /* this doesn't appear to work; I'm not sure why */
    }

    .connectivityButtonText {
      /*font-size: 40;*/
      /* note that padding unfortunately isn't supported by the default skin, so we have to set the size of the button instead
	  paddingTop: 20;
	  paddingBottom: 20;
	  paddingLeft: 20;
	  paddingRight: 20;
	  */
    }

  </fx:Style>
  <fx:Script><![CDATA[
    import collaboRhythm.core.controller.IErrorDetailsProvider;
    import collaboRhythm.core.view.ConnectivityEvent;

    import mx.events.ResizeEvent;

    public static const CONNECT_IN_PROGRESS_STATE:String = "connectInProgress";
    public static const CONNECT_FAILED_STATE:String = "connectFailed";
    public static const CONNECTION_ERRORS_SAVING_STATE:String = "connectionErrorsSaving";
    public static const UNEXPECTED_ERRORS_SAVING_STATE:String = "unexpectedErrorsSaving";
    private static const DETAILS_TEXT_AREA_HEIGHT:Number = 200;

    [Embed("../../../../../CollaboRhythm.Tablet/src/assets/swfs/buffering.swf")]
    [Bindable]
    public var bufferingAnimation:Class;
    private var _isLoading:Boolean;
    private var _isSaving:Boolean;
    private var _detailsMessage:String;
    private var _errorDetailsProvider:IErrorDetailsProvider;

    private function retryButton_clickHandler():void
    {
      dispatchEvent(new ConnectivityEvent(ConnectivityEvent.RETRY));
    }

    private function quitButton_clickHandler():void
    {
      dispatchEvent(new ConnectivityEvent(ConnectivityEvent.QUIT));
    }

    private function ignoreButton_clickHandler():void
    {
      dispatchEvent(new ConnectivityEvent(ConnectivityEvent.IGNORE));
    }

    public function get isLoading():Boolean
    {
      return _isLoading;
    }

    public function set isLoading(value:Boolean):void
    {
      _isLoading = value;
    }

    public function get isSaving():Boolean
    {
      return _isSaving;
    }

    public function set isSaving(value:Boolean):void
    {
      _isSaving = value;
    }

    [Bindable]
    public function get detailsMessage():String
    {
      return _detailsMessage;
    }

    public function set detailsMessage(value:String):void
    {
      _detailsMessage = value;
    }

    private function sendEmail_clickHandler(event:MouseEvent):void
    {
      var variables:URLVariables = new URLVariables();
      variables.subject = "CollaboRhythm Connection Error Report";
      variables.body = "\n\n---------------------------------------------------------------------------------\n" +
      "Please add details of what you were doing and why you are sending this error report in the space above above.\n" +
      "Automatically generated details for this error reported are included below.\n" +
      "---------------------------------------------------------------------------------\n" +
      "Error Message:\n" + detailsMessage + "\n\n" + errorDetailsProvider.getExtendedErrorDetails();
      var defaultEmailTo:String = "";
      var urlRequest:URLRequest = new URLRequest("mailto:" + encodeURIComponent(defaultEmailTo));
      urlRequest.data = variables;
      navigateToURL(urlRequest);
    }

    public function get errorDetailsProvider():IErrorDetailsProvider
    {
      return _errorDetailsProvider;
    }

    public function set errorDetailsProvider(value:IErrorDetailsProvider):void
    {
      _errorDetailsProvider = value;
    }

    private function resizeHandler(event:ResizeEvent):void
    {
      var dialogWidth:Number = this.width * 0.8;
      // limit the width to a reasonable size
      dialogWidth = Math.min(1000, dialogWidth);
      dialogGroup.percentWidth = NaN;
      dialogGroup.width = dialogWidth;
    }
    ]]></fx:Script>
  <s:Rect width="100%" height="100%">
    <s:fill>
      <s:SolidColor color="#000000" alpha="0.3"/>
    </s:fill>
  </s:Rect>
  <s:Group id="dialogGroup" verticalCenter="0" horizontalCenter="0" width="80%">
    <s:Rect width="100%" height="100%">
      <s:stroke>
        <s:SolidColorStroke color="#FFFFFF" alpha="0.5"/>
      </s:stroke>
      <s:fill>
        <s:SolidColor color="#000000" alpha="0.9"/>
      </s:fill>
    </s:Rect>
    <s:VGroup id="dialogContentGroup" horizontalAlign="center" paddingLeft="20" paddingRight="20"
              paddingTop="20" paddingBottom="20" gap="20" width="100%">
      <s:Label text="Connecting to your health record." includeIn="connectInProgress"
               styleName="connectivityText"
               width="100%"/>
      <s:BusyIndicator id="busyIndicator" symbolColor="0xFFFFFF" width="200" height="200"
                       includeIn="connectInProgress"/>
      <!--<s:SWFLoader id="bufferingIndicatorView" source="{bufferingAnimation}" width="200" height="200" includeIn="connectInProgress"/>-->
      <s:Label text="Failed to connect to your health record." includeIn="connectFailed"
               styleName="connectivityText"
               width="100%"/>
      <s:Label text="Failed to save data to your health record."
               includeIn="connectionErrorsSaving, unexpectedErrorsSaving"
               styleName="connectivityText"
               width="100%"/>
      <s:Label text="Please check your internet connection." includeIn="connectFailed, connectionErrorsSaving"
               styleName="connectivityText"
               width="100%"/>
      <s:Label text="Unsaved data will be discarded. Please contact an administrator for help."
               includeIn="unexpectedErrorsSaving"
               styleName="connectivityText"
               width="100%"/>
      <s:Group id="buttonsAndDetailsGroup" width="100%">
        <s:Group id="buttonsGroup" width="100%"
                 itemCreationPolicy="immediate"
                 includeIn="connectFailed, connectionErrorsSaving, unexpectedErrorsSaving"
                >
          <s:layout>
            <view:FlowLayout gap="20"/>
          </s:layout>
          <s:ToggleButton id="showDetailsButton"
                          skinClass="spark.skins.mobile.ButtonSkin"
                          label="{showDetailsButton.selected ? 'Hide Details &lt;&lt;' : 'Show Details &gt;&gt;'}"
                          styleName="connectivityButtonText"/>
          <s:Button id="retryButton" label="Retry" includeIn="connectFailed, connectionErrorsSaving"
                    width="180"
                    styleName="connectivityButtonText" click="retryButton_clickHandler()"/>
          <s:Button id="quitButton" label="Quit" includeIn="connectFailed, unexpectedErrorsSaving"
                    styleName="connectivityButtonText"
                    width="180"
                    click="quitButton_clickHandler()"/>
          <s:Button id="ignoreButton" label="Ignore"
                    includeIn="connectionErrorsSaving, unexpectedErrorsSaving, connectFailed"
                    styleName="connectivityButtonText"
                    width="180"
                    click="ignoreButton_clickHandler()"/>
          <s:Button id="sendEmail" label="Send E-mail"
                    styleName="connectivityButtonText"
                    minWidth="180"
                    click="sendEmail_clickHandler(event)"
                  />
        </s:Group>
        <!--TODO: come up with a simpler way to position this component so that buttonsGroup doesn't take up any space when buttonsGroup is excluded because of the state-->
        <s:TextArea id="detailsTextArea"
                    showEffect="detailsShowEffect"
                    hideEffect="detailsHideEffect"
                    y="{currentState == 'connectFailed' || currentState == 'connectionErrorsSaving' || currentState == 'unexpectedErrorsSaving' ?
								(buttonsGroup.y + buttonsGroup.height + (dialogContentGroup.gap * detailsTextArea.height / DETAILS_TEXT_AREA_HEIGHT)) : 0}"
                    height="0" width="100%" visible="{showDetailsButton &amp;&amp; showDetailsButton.selected}"
                    text="{detailsMessage}" editable="false"
                    styleName="connectivityDetailsText"/>
      </s:Group>
    </s:VGroup>
  </s:Group>
</s:Group>