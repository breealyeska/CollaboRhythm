<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:controls="com.dougmccune.controls.*"
		 addedToStage="addedToStageHandler()"
		 creationComplete="creationCompleteHandler()"
		 mouseDown="mouseDownHandler(event)"
		 remove="removeHandler()"
		 width="{ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_WIDTH + 2 * SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH}">
	<fx:Declarations>
		<s:Move id="stackEffect" target="{this}"/>
		<s:Fade id="fadeOutEffect" target="{frame}" alphaFrom="{frame.alpha}" alphaTo="0"/>
		<s:Fade id="fadeInEffect" target="{frame}" alphaFrom="{frame.alpha}" alphaTo="1"/>
	</fx:Declarations>
	<s:layout>
		<controls:ChildIndependentLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.model.ScheduleTimelineModel;
		import collaboRhythm.plugins.schedule.shared.model.MoveData;
		import collaboRhythm.plugins.schedule.shared.model.ScheduleGroup;
		import collaboRhythm.plugins.schedule.shared.view.ScheduleTimelineViewEvent;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;

		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.collections.ArrayCollection;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.EffectEvent;

		import resources.physics.AccelerationEaser;

		import spark.components.Group;

		public static const SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH:Number = 10;
		public static const SCHEDULE_GROUP_TIMELINE_VIEW_TOP_WIDTH:Number = 60;

		[Bindable]
		private var _scheduleModel:ScheduleModel;
		[Bindable]
		private var _scheduleTimelineModel:ScheduleTimelineModel;
		[Bindable]
		private var _scheduleGroup:ScheduleGroup;
		[Bindable]
		private var _scheduleGroupsContainer:Group;
		private var _scheduleItemsCollection:ArrayCollection;
		private var _scheduleFullView:ScheduleTimelineFullView;
		private var _scheduleItemTimelineViews:Vector.<ScheduleItemOccurrenceTimelineView> = new Vector.<ScheduleItemOccurrenceTimelineView>;
		private var _scheduleGroupSpotlightView:ScheduleGroupSpotlightView = new ScheduleGroupSpotlightView;
		private var _areChildrenCreated:Boolean = false;
		private var _changeWatchers:Vector.<ChangeWatcher> = new Vector.<ChangeWatcher>();

		private var _mouseDownOffsetX:Number;
		private var _mouseDownOffsetY:Number;
		private var _addedToStage:Boolean;


		public function init(scheduleModel:ScheduleModel, scheduleTimelineModel:ScheduleTimelineModel,
							 scheduleGroup:ScheduleGroup, scheduleGroupsContainer:Group,
							 scheduleFullView:ScheduleTimelineFullView):void
		{
			_scheduleModel = scheduleModel;
			_scheduleTimelineModel = scheduleTimelineModel;
			_scheduleGroup = scheduleGroup;
			_scheduleGroupsContainer = scheduleGroupsContainer;
			_scheduleFullView = scheduleFullView;
			_scheduleItemsCollection = scheduleGroup.scheduleItemsOccurrencesCollection;

			_scheduleItemsCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE,
					scheduleItemsCollectionChangeHandler, false, 0, true);

			_changeWatchers.push(BindingUtils.bindSetter(initializedChangeHandler,
					_scheduleModel,
					"isInitialized", false, true));
			_changeWatchers.push(BindingUtils.bindSetter(timeWidthChangeHandler,
					_scheduleTimelineModel,
					"timeWidth", false, true));
			_changeWatchers.push(BindingUtils.bindSetter(movingChangeHandler,
					_scheduleGroup,
					"moving", false, true));
			_changeWatchers.push(BindingUtils.bindSetter(dateCenterChangeHandler,
					_scheduleGroup, "dateCenter", false,
					true));
			_changeWatchers.push(BindingUtils.bindSetter(dateStartChangeHandler,
					_scheduleGroup, "dateStart", false,
					true));
			_changeWatchers.push(BindingUtils.bindSetter(dateEndChangeHandler,
					_scheduleGroup, "dateEnd", false, true));
			_changeWatchers.push(BindingUtils.bindSetter(yPositionChangeHandler, _scheduleGroup,
					"yPosition", false, true));
			_changeWatchers.push(BindingUtils.bindSetter(stackingUpdatedChangeHandler,
					_scheduleTimelineModel,
					"stackingUpdated",
					false, true));
			_changeWatchers.push(BindingUtils.bindSetter(containerHeightChangeHandler,
					_scheduleTimelineModel,
					"containerHeight",
					false, true));

			_scheduleGroupSpotlightView.init(_scheduleGroup, _scheduleGroupsContainer, _scheduleFullView);
			_scheduleFullView.scheduleGroupSpotlightViewsContainer.addElement(_scheduleGroupSpotlightView);
		}

		private function timeWidthChangeHandler(timeWidth:int):void
		{
			updateXPosition();
		}

		private function containerHeightChangeHandler(containerHeight:int):void
		{
			updateYPosition();
		}

		override protected function createChildren():void
		{
			super.createChildren();

			if (_scheduleModel.isInitialized)
			{
				for each (var scheduleItemOccurrence:ScheduleItemOccurrence in _scheduleItemsCollection)
				{
					createScheduleItemFullView(scheduleItemOccurrence);
				}
				_areChildrenCreated = true;
				resize();
			}
		}

		private function addedToStageHandler():void
		{
			_addedToStage = true;
			if (scheduleGroup.moving)
			{
				showMoving();
			}
		}

		private function creationCompleteHandler():void
		{
			if (_scheduleModel.isInitialized)
			{
				updateXandYPositions();
			}
		}

		public function get scheduleGroup():ScheduleGroup
		{
			return _scheduleGroup;
		}

		public function scheduleItemsCollectionChangeHandler(event:CollectionEvent):void
		{
			if (event.kind == CollectionEventKind.ADD)
			{
				if (_areChildrenCreated)
				{
					for each (var scheduleItemOccurrenceAdded:ScheduleItemOccurrence in event.items)
					{
						createScheduleItemFullView(scheduleItemOccurrenceAdded);
					}
				}
			}
			else if (event.kind == CollectionEventKind.REMOVE)
			{
				for each (var scheduleItemOccurrenceRemoved:ScheduleItemOccurrence in event.items)
				{
					destroyScheduleItemFullView(scheduleItemOccurrenceRemoved);
				}
			}
		}

		public function createScheduleItemFullView(scheduleItemOccurrence:ScheduleItemOccurrence):void
		{
			var scheduleItemOccurrenceTimelineView:ScheduleItemOccurrenceTimelineView = new ScheduleItemOccurrenceTimelineView();
			scheduleItemOccurrenceTimelineView.init(scheduleItemOccurrence, _scheduleModel);
//			var scheduleItemTimelineView:ScheduleItemTimelineViewBase = _scheduleModel.viewFactory.createScheduleItemTimelineView(scheduleItemOccurrence);
			if (scheduleItemOccurrenceTimelineView.scheduleItemOccurrence.yPosition)
			{
				scheduleItemOccurrenceTimelineView.bottom = this.y + this.height -
						SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH -
						scheduleItemOccurrenceTimelineView.scheduleItemOccurrence.yPosition -
						ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_HEIGHT;
			}
			else
			{
				scheduleItemOccurrenceTimelineView.bottom = (_scheduleItemTimelineViews.length) *
						(SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH +
								ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_HEIGHT);
			}
			scheduleItemOccurrenceTimelineView.scheduleItemOccurrence.yPosition = NaN;
			scheduleItemsContainer.addElement(scheduleItemOccurrenceTimelineView);
			_scheduleItemTimelineViews.push(scheduleItemOccurrenceTimelineView);
		}

		public function destroyScheduleItemFullView(scheduleItemOccurrence:ScheduleItemOccurrence):void
		{
			for each (var scheduleItemOccurrenceTimelineView:ScheduleItemOccurrenceTimelineView in
					_scheduleItemTimelineViews)
			{
				if (scheduleItemOccurrenceTimelineView.scheduleItemOccurrence == scheduleItemOccurrence)
				{

					var scheduleItemTimelineViewIndex:int = _scheduleItemTimelineViews.indexOf(scheduleItemOccurrenceTimelineView);
					_scheduleItemTimelineViews.splice(scheduleItemTimelineViewIndex, 1);
					scheduleItemsContainer.removeElement(scheduleItemOccurrenceTimelineView);
					scheduleItemOccurrenceTimelineView.destroy();
					scheduleItemOccurrenceTimelineView = null;
				}
			}
		}

		private function initializedChangeHandler(isInitialized:Boolean):void
		{
			if (_areChildrenCreated && isInitialized)
			{
				updateXandYPositions();
			}
		}

		private function showMoving():void
		{
			if (stage)
			{
				glowFilter.blurX = 10;
				glowFilter.blurY = 10;
				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler, false, 0, true);
				stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);
			}
		}

		private function movingChangeHandler(moving:Boolean):void
		{
			if (moving && _addedToStage)
			{
				showMoving();
			}
			else
			{
				glowFilter.blurX = 5;
				glowFilter.blurY = 5;
			}
		}

		private function resize():void
		{
			if (_scheduleItemTimelineViews)
			{
				height = _scheduleItemTimelineViews.length *
						(ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_HEIGHT +
								SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH) + SCHEDULE_GROUP_TIMELINE_VIEW_TOP_WIDTH;
			}
			updateYPosition();
		}

		private function dateCenterChangeHandler(change:Date):void
		{
			if (_areChildrenCreated && _scheduleModel.isInitialized)
			{
				updateXPosition();
			}
		}

		private function dateStartChangeHandler(change:Date):void
		{
			if (_areChildrenCreated && _scheduleModel.isInitialized)
			{
				updateXPosition();
			}
		}

		private function dateEndChangeHandler(change:Date):void
		{
			if (_areChildrenCreated && _scheduleModel.isInitialized)
			{
				updateXPosition();
			}
		}

		private function yPositionChangeHandler(change:Number):void
		{
			if (scheduleGroup.moving)
			{
				updateYPosition();
			}
		}

		private function stackingUpdatedChangeHandler(change:Boolean):void
		{
			if (_areChildrenCreated && _scheduleModel.isInitialized)
			{
				if (change)
				{
					animateStacking();
					animateScheduleItemStacking();
				}
				else if (!_scheduleGroup.moving)
				{
					fadeOutEffect.play();
				}
			}
		}

		private function animateScheduleItemStacking():void
		{
			var scheduleItemTimelineViewIndex:int = 0;
			for each (var scheduleItemOccurrenceTimelineView:ScheduleItemOccurrenceTimelineView in
					scheduleItemTimelineViews)
			{
				scheduleItemOccurrenceTimelineView.motionPath.valueFrom = scheduleItemOccurrenceTimelineView.bottom;
				scheduleItemOccurrenceTimelineView.motionPath.valueTo = scheduleItemTimelineViewIndex *
						(SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH +
								ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_HEIGHT);
				if (scheduleItemOccurrenceTimelineView.motionPath.valueTo >
						scheduleItemOccurrenceTimelineView.motionPath.valueTo)
				{
					var moveEaser:AccelerationEaser = new AccelerationEaser(int(scheduleItemOccurrenceTimelineView.motionPath.valueTo) -
							int(scheduleItemOccurrenceTimelineView.motionPath.valueFrom),
							AccelerationEaser.gravity * ScheduleTimelineFullView.FRICTION);
					scheduleItemOccurrenceTimelineView.stackEffect.easer = moveEaser;
					scheduleItemOccurrenceTimelineView.stackEffect.duration = moveEaser.duration;
				}
				else
				{
					scheduleItemOccurrenceTimelineView.stackEffect.easer = null;
					scheduleItemOccurrenceTimelineView.stackEffect.duration = ScheduleTimelineFullView.DURATION;
				}
				scheduleItemOccurrenceTimelineView.stackEffect.play();
				scheduleItemOccurrenceTimelineView.stackEffect.addEventListener(EffectEvent.EFFECT_END,
						scheduleItemStackingEffectEndHandler, false, 0,
						true);
				scheduleItemTimelineViewIndex += 1;
			}
		}

		private function scheduleItemStackingEffectEndHandler(event:EffectEvent):void
		{
			resize();
			if (scheduleGroup.scheduleItemsOccurrencesCollection.length > 1)
			{
				fadeInEffect.play();
			}
		}

		private function animateStacking():void
		{
			stackEffect.yFrom = this.y;
			stackEffect.yTo = calculateYPosition();
			if (stackEffect.yTo > stackEffect.yFrom)
			{
				var moveEaser:AccelerationEaser = new AccelerationEaser(stackEffect.yTo - stackEffect.yFrom,
						AccelerationEaser.gravity * ScheduleTimelineFullView.FRICTION);
				stackEffect.easer = moveEaser;
				stackEffect.duration = moveEaser.duration;
			}
			else
			{
				stackEffect.easer = null;
				stackEffect.duration = ScheduleTimelineFullView.DURATION;
			}
			stackEffect.addEventListener(EffectEvent.EFFECT_UPDATE, stackEffectUpdate, false, 0, true);
			stackEffect.play();
		}

		private function stackEffectUpdate(event:EffectEvent):void
		{
			if (_scheduleGroupSpotlightView)
			{
				_scheduleGroupSpotlightView.height = calculateSpotlightHeight();
			}
		}

		private function updateXandYPositions():void
		{
			updateXPosition();
			updateYPosition();
		}

		private function updateXPosition():void
		{
			this.x = calculateXPosition();
			if (_scheduleGroupSpotlightView)
			{
				_scheduleGroupSpotlightView.width = calculateSpotlightWidth();
				_scheduleGroupSpotlightView.x = calculateSpotlightXPosition();
			}
		}

		private function updateYPosition():void
		{
			this.y = calculateYPosition();
			if (_scheduleGroupSpotlightView)
			{
				_scheduleGroupSpotlightView.height = calculateSpotlightHeight();
			}
		}

		private function calculateXPosition():Number
		{
			return Math.floor((scheduleGroup.dateCenter.hours + 1 + scheduleGroup.dateCenter.minutes / 60) *
					_scheduleTimelineModel.timeWidth + (_scheduleTimelineModel.timeWidth / 2) -
					(ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_PICTURE_WIDTH / 2) -
					SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH);
		}

		private function calculateYPosition():Number
		{
			var result:Number;
			if (!scheduleGroup.moving)
			{
				result = Math.floor(_scheduleGroupsContainer.height - this.height -
						ScheduleTimelineFullView.ADHERENCE_WINDOW_INITIAL_HEIGHT -
						scheduleGroup.scheduleGroupsStacked * SCHEDULE_GROUP_TIMELINE_VIEW_TOP_WIDTH -
						scheduleGroup.scheduleItemsStacked *
								(ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_HEIGHT +
										SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH) -
						scheduleGroup.stackNumber * SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH);
				scheduleGroup.yPosition = result;
			}
			else
			{
				if (scheduleGroup.yPosition < 0)
				{
					result = 0;
				}
				else if (scheduleGroup.yPosition + this.height > _scheduleFullView.scheduleGroupsContainer.height)
				{
					result = _scheduleFullView.scheduleGroupsContainer.height - this.height;
				}
				else
				{
					result = scheduleGroup.yPosition;
				}
			}

			return result
		}

		private function calculateSpotlightWidth():Number
		{
			return Math.floor((_scheduleGroup.dateEnd.time - _scheduleGroup.dateStart.time) / (1000 * 60 * 60) *
					_scheduleTimelineModel.timeWidth);
		}

		private function calculateSpotlightXPosition():Number
		{
			return Math.floor(this.x + SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH +
					ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_PICTURE_WIDTH / 2 -
					_scheduleGroupSpotlightView.width / 2);
		}

		private function calculateSpotlightHeight():Number
		{
			return Math.floor(_scheduleFullView.height -
					(this.y + this.height - SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH));
		}

		private function mouseDownHandler(event:MouseEvent):void
		{
			if (scheduleGroup.scheduleItemsOccurrencesCollection.length > 1 && !stackEffect.isPlaying)
			{
				var moveData:MoveData = createMoveData(event);
				dispatchEvent(new ScheduleTimelineViewEvent(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_DOWN,
						moveData));
			}
		}

		private function mouseMoveHandler(event:MouseEvent):void
		{
			var moveData:MoveData = createMoveData(event);
			dispatchEvent(new ScheduleTimelineViewEvent(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_MOVE,
					moveData));
		}

		private function mouseUpHandler(event:MouseEvent):void
		{
			stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

			var moveData:MoveData = createMoveData(event);
			dispatchEvent(new ScheduleTimelineViewEvent(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_UP,
					moveData));
		}

		private function createMoveData(event:MouseEvent):MoveData
		{
			var moveData:MoveData = new MoveData();
			moveData.id = scheduleGroup.id;
			moveData.localX = event.localX;
			moveData.localY = event.localY;
			moveData.stageX = event.stageX;
			moveData.stageY = event.stageY;

			return moveData;
		}

		public function get scheduleItemTimelineViews():Vector.<ScheduleItemOccurrenceTimelineView>
		{
			return _scheduleItemTimelineViews;
		}

		public function set scheduleItemTimelineViews(value:Vector.<ScheduleItemOccurrenceTimelineView>):void
		{
			_scheduleItemTimelineViews = value;
		}

		public function get scheduleGroupSpotlightView():ScheduleGroupSpotlightView
		{
			return _scheduleGroupSpotlightView;
		}

		public function set scheduleGroupSpotlightView(value:ScheduleGroupSpotlightView):void
		{
			_scheduleGroupSpotlightView = value;
		}

		private function removeHandler():void
		{
			stackEffect.end();
			fadeInEffect.end();
			fadeOutEffect.end();

			_addedToStage = false;

			for each (var changeWatcher:ChangeWatcher in _changeWatchers)
			{
				changeWatcher.unwatch();
			}
		}
		]]>
	</fx:Script>
	<s:Group id="frame" width="100%" height="100%">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" alpha="0.4"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF" alpha="0.5"/>
			</s:stroke>
		</s:Rect>
		<mx:Image top="8" horizontalCenter="0" source="@Embed(source='/assets/images/gripHorizontalWide.png')"/>
	</s:Group>
	<s:Group id="scheduleItemsContainer"
			 left="{SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH}"
			 right="{SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH}"
			 top="{SCHEDULE_GROUP_TIMELINE_VIEW_TOP_WIDTH}"
			 bottom="{SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH}">
		<s:layout>
			<controls:ChildIndependentLayout/>
		</s:layout>
	</s:Group>
	<s:filters>
		<s:GlowFilter id="glowFilter"
					  quality="3"
					  alpha="0.2"
					  color="0x000000"
					  blurX="5"
					  blurY="5"
					  strength="5"/>
	</s:filters>
</s:Group>
