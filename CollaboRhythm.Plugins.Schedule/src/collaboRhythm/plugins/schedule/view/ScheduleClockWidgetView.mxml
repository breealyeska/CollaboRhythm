<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="collaboRhythm.plugins.schedule.view.*"
		 xmlns:images="assets.images.*"
		 xmlns:controls="com.dougmccune.controls.*"
		 clipAndEnableScrolling="true"
		 resize="resizeHandler()"
		 creationComplete="creationCompleteHandler()"
		 remove="removeHandler()"
		 height="100%" width="100%"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<controls:ChildIndependentLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
		import collaboRhythm.plugins.schedule.controller.ScheduleAppController;
		import collaboRhythm.plugins.schedule.controller.ScheduleClockController;
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.shared.model.ScheduleGroup;
		import collaboRhythm.shared.model.services.ICurrentDateSource;
		import collaboRhythm.shared.model.services.WorkstationKernel;
		import collaboRhythm.shared.model.settings.Settings;

		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.collections.ArrayCollection;
		import mx.effects.Parallel;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;

		import spark.effects.Fade;
		import spark.effects.Move;

		//TODO: Maybe ChildIndependentLayout belongs in shared?

		private var _scheduleModel:ScheduleModel;
		private var _scheduleClockController:ScheduleClockController;
		[Bindable]
		private var _settings:Settings;
		private var _scheduleGroupsCollection:ArrayCollection;
		private var _scheduleGroupClockViews:Vector.<ScheduleGroupClockView> = new Vector.<ScheduleGroupClockView>();
		private var _isCreationComplete:Boolean;
		private var _scheduleModelInitialized_changeWatcher:ChangeWatcher;
		private var _currentDateSource:ICurrentDateSource;

		public function init(scheduleAppController:ScheduleAppController, scheduleModel:ScheduleModel,
							 settings:Settings):void
		{
			_scheduleModel = scheduleModel;
			_scheduleClockController = scheduleAppController.scheduleClockController;
			_settings = settings;

			_scheduleGroupsCollection = _scheduleModel.scheduleGroupsCollection;
			_scheduleGroupsCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE,
					scheduleGroupsCollectionChangeHandler);

			this.addEventListener(ScheduleClockWidgetViewEvent.SCHEDULE_GROUP_CLOCK_VIEW_CLICK,
					scheduleGroupClockViewClickHandler);

			_scheduleModelInitialized_changeWatcher = BindingUtils.bindSetter(scheduleModelInitialized_changeWatcher,
					_scheduleModel, "isInitialized", false,
					true);
		}

		private function creationCompleteHandler():void
		{
			_currentDateSource = WorkstationKernel.instance.resolve(ICurrentDateSource) as ICurrentDateSource;
			_currentDateSource.addEventListener(Event.CHANGE, currentDateSource_changeHandler, false, 0, true);

			if (_scheduleModel && _scheduleModel.isInitialized)
			{
				createScheduleGroups();
			}

			_isCreationComplete = true;

			updateTime();

			// creates a Timer that fires an event once per 10 minutes
			var timer:Timer = new Timer(600000);

			// designates the onTick() method to handle Timer events
			timer.addEventListener(TimerEvent.TIMER, onTick);

			// starts the clock ticking
			timer.start();
		}

		private function scheduleModelInitialized_changeWatcher(isInitialized:Boolean):void
		{
			if (isInitialized && _isCreationComplete)
			{
				createScheduleGroups();
				updateTime();
			}
		}

		private function createScheduleGroups():void
		{
			_scheduleModel.scheduleReportingModel.sortScheduleItemOccurrences();

			for each (var scheduleGroup:ScheduleGroup in _scheduleGroupsCollection)
			{
				createScheduleGroupView(scheduleGroup);
			}
		}

		private function onTick(event:TimerEvent):void
		{
			updateTime();
		}

		private function updateTime():void
		{
			var currentDate:Date = _currentDateSource.now();
			var minutes:uint = currentDate.getMinutes();
			var hours:uint = currentDate.getHours();

			clockHand.rotation = (hours * 15) + (minutes * 0.25);
		}

		public function scheduleGroupsCollectionChangeHandler(event:CollectionEvent):void
		{
			if (event.kind == CollectionEventKind.ADD)
			{
				if (_isCreationComplete && _scheduleModel.isInitialized)
				{
					for each (var scheduleGroupAdded:ScheduleGroup in event.items)
					{
						createScheduleGroupView(scheduleGroupAdded);
					}
				}
			}
			else if (event.kind == CollectionEventKind.REMOVE)
			{
				for each (var scheduleGroupRemoved:ScheduleGroup in event.items)
				{
					destroyScheduleGroupView(scheduleGroupRemoved);
				}
			}
			else if (event.kind == CollectionEventKind.RESET)
			{
				for each (var scheduleGroupClockView:ScheduleGroupClockView in _scheduleGroupClockViews)
				{
					scheduleGroupsContainer.removeElement(scheduleGroupClockView);
				}
				_scheduleGroupClockViews = new Vector.<ScheduleGroupClockView>();
			}
		}

		public function createScheduleGroupView(scheduleGroup:ScheduleGroup):void
		{
			var scheduleGroupClockView:ScheduleGroupClockView = new ScheduleGroupClockView();
			animateNewScheduleGroup(scheduleGroupClockView, scheduleGroup);
			scheduleGroupClockView.init(_scheduleModel, scheduleGroup, scheduleGroupsContainer);
			scheduleGroupsContainer.addElement(scheduleGroupClockView);
			_scheduleGroupClockViews.push(scheduleGroupClockView);
		}

		private function animateNewScheduleGroup(scheduleGroupClockView:ScheduleGroupClockView,
												 scheduleGroup:ScheduleGroup):void
		{
			if (useSlideInAnimation)
			{
				scheduleGroupClockView.alpha = 0;
				scheduleGroupClockView.includeInLayout = false;

				var parallel:Parallel = new Parallel(scheduleGroupClockView);

				var fade:Fade = new Fade(scheduleGroupClockView);
				fade.alphaFrom = 0;
				fade.alphaTo = 1;
				parallel.addChild(fade);

				var angle:Number = (ScheduleGroupClockView.calculateAngleFromDate(scheduleGroup.dateCenter) - 90) *
						Math.PI / 180;

				var move:Move = new Move(scheduleGroupClockView);
				var moveDistance:Number = width;
				move.xFrom = Math.cos(angle) * moveDistance;
				move.yFrom = Math.sin(angle) * moveDistance;
				move.xTo = 0;
				move.yTo = 0;
				parallel.addChild(move);

				// make the groups slide in sequentially
				parallel.startDelay = 500 + _scheduleGroupClockViews.length * 100;
				parallel.play();
			}
		}

		public function destroyScheduleGroupView(scheduleGroup:ScheduleGroup):void
		{
			for each (var scheduleGroupClockView:ScheduleGroupClockView in _scheduleGroupClockViews)
			{
				if (scheduleGroupClockView.scheduleGroup == scheduleGroup)
				{
					var scheduleGroupClockViewIndex:Number = _scheduleGroupClockViews.indexOf(scheduleGroupClockView);
					_scheduleGroupClockViews.splice(scheduleGroupClockViewIndex, 1);
					scheduleGroupsContainer.removeElement(scheduleGroupClockView);
				}
			}
		}

		private function resizeHandler():void
		{
			if (this.width < this.height)
			{
				clock.width = this.width;
				clock.height = this.width;
			}
			else
			{
				clock.width = this.height;
				clock.height = this.height;
			}
		}

		private function scheduleGroupClockViewClickHandler(event:ScheduleClockWidgetViewEvent):void
		{
			var scheduleGroup:ScheduleGroup = event.scheduleGroup;
			_scheduleClockController.openScheduleReportingFullView(scheduleGroup);
		}

		public function destroyChildren():void
		{
			scheduleGroupsContainer.removeAllElements();
			scheduleItemsContainer.removeAllElements();
			_scheduleGroupClockViews = new Vector.<ScheduleGroupClockView>();
		}

		private function removeHandler():void
		{
			_scheduleModelInitialized_changeWatcher.unwatch();
		}

		private function currentDateSource_changeHandler(event:Event):void
		{
			updateTime();
		}

		private function showScheduleTimelineFullViewButton_clickHandler():void
		{
			_scheduleClockController.showScheduleTimelineFullView("widget button click");
		}

		public function get useSlideInAnimation():Boolean
		{
			return _settings && _settings.clockAnimationMode == "slide";
		}
		]]>
	</fx:Script>
	<s:Group id="clock" verticalCenter="0" horizontalCenter="0">
		<images:clockBackground id="clockBackground" width="{clock.width}" height="{clock.height}" mouseEnabled="false"
								mouseChildren="false"/>
		<s:Group id="scheduleGroupsContainer" width="{clock.width}" height="{clock.height}"/>
		<s:Group id="scheduleItemsContainer" width="{clock.width}" height="{clock.height}"/>
		<images:clockHand id="clockHand" x="{clock.width / 2}" y="{clock.height / 2}" width="{clock.width / 2}"
						  height="{clock.height / 2}" mouseEnabled="false" mouseChildren="false"/>
		<images:clockForeground id="clockForeground" width="{clock.width}" height="{clock.height}" mouseEnabled="false"
								mouseChildren="false"/>
		<s:Group width="90" height="90" horizontalCenter="0" verticalCenter="0" visible="{_settings.isClinicianMode}"
				 click="showScheduleTimelineFullViewButton_clickHandler()">
			<s:Button width="100%" height="100%"
					  skinClass="collaboRhythm.shared.view.skins.HomeTransparentNavigationButtonSkin"/>
			<s:Group left="10" right="10" top="10" bottom="10" mouseEnabled="false" mouseChildren="false">
				<s:Ellipse width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="0x000000"/>
					</s:fill>
				</s:Ellipse>
				<view:EditIcon width="45" height="45" verticalCenter="0" horizontalCenter="0"/>
			</s:Group>
		</s:Group>
	</s:Group>
</s:Group>