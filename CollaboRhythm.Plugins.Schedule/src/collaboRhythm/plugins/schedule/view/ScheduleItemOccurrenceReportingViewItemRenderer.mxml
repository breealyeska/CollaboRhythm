<?xml version="1.0"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:sharedView="collaboRhythm.plugins.schedule.shared.view.*"
				xmlns:controls="com.dougmccune.controls.*"
				width="100%"
				height="{SCHEDULE_ITEM_REPORTING_VIEW_HEIGHT}"
				removedFromStage="removedHandler(event)"
				autoDrawBackground="false">
	<fx:Style>
		#additionalInformationLabel {
			fontSize: 26;
			fontWeight: bold;
			textAlign: center;
			lineBreak: toFit;
		}
	</fx:Style>
	<fx:Script>
        <![CDATA[
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionListViewAdapter;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionListViewController;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionListViewModel;
		import collaboRhythm.plugins.schedule.shared.view.ScheduledHealthActionDetailViewEvent;
		import collaboRhythm.shared.collaboration.model.CollaborationLobbyNetConnectionServiceProxy;
		import collaboRhythm.shared.model.healthRecord.document.AdherenceItem;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;

		import mx.core.IVisualElement;

		import spark.components.Image;
		import spark.components.List;

		public static const SCHEDULE_ITEM_REPORTING_VIEW_HEIGHT:Number = 142;

		[Bindable]
		private var _scheduleItemOccurrence:ScheduleItemOccurrence;
		private var _scheduleItemOccurrenceReportingController:IHealthActionListViewController;

		private var _isDataSet:Boolean = false;
		private var _instructionalVideoPath:String;
		[Bindable]
		private var _scheduleModel:ScheduleModel;

		private var _scheduleItemOccurrenceReportingViewAdapter:IHealthActionListViewAdapter;

		override public function set data(value:Object):void
		{
			// This function gets called every time that the scheduleItemOccurrence is modified. This is problematic
			// because it adds the image every time that the user checks the adherenceCheckBox. It may be necessary
			// to write code that more specifically prevents the image from being added multiple times if other components
			// of the view need to be updated dynamically
			if (!_isDataSet)
			{
				super.data = value;
				_scheduleItemOccurrence = ScheduleItemOccurrence(value);

				var scheduleGroupReportingView:ScheduleGroupReportingView = owner as ScheduleGroupReportingView;
				_scheduleModel = scheduleGroupReportingView.scheduleModel;
				_scheduleItemOccurrenceReportingViewAdapter = _scheduleModel.healthActionListViewAdapterFactory.createScheduledHealthActionViewAdapter(_scheduleItemOccurrence,
						_scheduleModel);

				if (_scheduleItemOccurrenceReportingViewAdapter)
				{
					scheduledHealthActionDetailView.init(_scheduleItemOccurrenceReportingViewAdapter);
					scheduledHealthActionDetailView.addEventListener(ScheduledHealthActionDetailViewEvent.PLAY_VIDEO,
							playVideoEventHandler);

					var scheduleItemOccurrenceReportingModel:IHealthActionListViewModel = _scheduleItemOccurrenceReportingViewAdapter.model;
					_scheduleItemOccurrenceReportingController = _scheduleItemOccurrenceReportingViewAdapter.controller;
					scheduleItemOccurrenceReportingModel.healthActionInputController = _scheduleModel.healthActionInputControllerFactory.createHealthActionInputController(_scheduleItemOccurrenceReportingViewAdapter.healthAction,
							_scheduleItemOccurrence, _scheduleModel, _scheduleModel,
							scheduleGroupReportingView.scheduleReportingController.viewNavigator,
							scheduleGroupReportingView.scheduleReportingController.collaborationLobbyNetConnectionServiceProxy);

					ScheduleItemOccurrenceClockView.scaleFontToFit(_scheduleItemOccurrenceReportingViewAdapter,
							additionalInformationLabel, 26);
					additionalInformationLabel.visible = scheduleItemOccurrenceReportingModel.healthActionInputController;
					additionalInformationLabel.text = _scheduleItemOccurrenceReportingViewAdapter.additionalAdherenceInformation;

					adherenceCheckBox.enabled = isAdherenceCheckBoxEnabled(_scheduleItemOccurrence.adherenceItem);
				}

				_isDataSet = true;
			}
		}

		private function playVideoEventHandler(event:ScheduledHealthActionDetailViewEvent):void
		{
			_scheduleItemOccurrenceReportingController.playVideo(event.instructionalVideoPath);
		}

		private function adherenceCheckBoxClickHandler(event:MouseEvent):void
		{
			event.stopPropagation();
			_scheduleItemOccurrenceReportingController.handleHealthActionResult();
		}

		private function secondaryInstructionsLabel_clickHandler(event:MouseEvent):void
		{
			_scheduleItemOccurrenceReportingController.playVideo(_instructionalVideoPath);
		}

		private function updateAdditionalAdherenceInformation(adherenceItem:AdherenceItem):String
		{
			return _scheduleItemOccurrenceReportingViewAdapter.additionalAdherenceInformation;
		}

		private function isAdherenceCheckBoxEnabled(adherenceItem:AdherenceItem, pendingAction:String = null,
													adherenceVoidingEnabled:Boolean = false):Boolean
		{
			if (_scheduleModel.accountId == _scheduleModel.activeAccount.accountId)
			{
				if (_scheduleModel.settings.adherenceVoidingEnabled)
				{
					return true;
				}
				else
				{
					if (adherenceItem)
					{
						return adherenceItem.pendingAction;
					}
					else
					{
						return true;
					}
				}
			}
			else
			{
				return false;
			}
		}

		private function removedHandler(event:Event):void
		{
			if (_scheduleItemOccurrenceReportingController)
			{
				_scheduleItemOccurrenceReportingController.removeEventListener();
			}
			if (_scheduleItemOccurrenceReportingViewAdapter.model.healthActionInputController)
			{
				_scheduleItemOccurrenceReportingViewAdapter.model.healthActionInputController.destroy();
			}
		}

		private function mouseDownHandler(event:MouseEvent):void
		{
			if (event.target != adherenceCheckBox)
			{
				mouseDownRect.visible = true;
			}
		}

		private function mouseOutHandler():void
		{
			mouseDownRect.visible = false;
		}

		private function mouseUpHandler():void
		{
			mouseDownRect.visible = false;
		}

		private function clickHandler():void
		{
			if (_scheduleItemOccurrenceReportingController)
			{
				_scheduleItemOccurrenceReportingController.handleHealthActionSelected();
			}
		}
		]]>
	</fx:Script>

	<s:Rect id="mouseDownRect" width="100%" height="100%" visible="false">
		<s:fill>
			<s:SolidColor color="0x6dcaec"/>
		</s:fill>
	</s:Rect>

	<s:HGroup width="100%" height="100%" gap="0">
		<sharedView:ScheduledHealthActionDetailView id="scheduledHealthActionDetailView" width="100%" height="100%" click="clickHandler()" mouseDown="mouseDownHandler(event)" mouseOut="mouseOutHandler()" mouseUp="mouseUpHandler()"/>
		<s:Group id="buttonGroup" width="80" height="100%">
			<s:layout>
				<controls:ChildIndependentLayout/>
			</s:layout>
			<sharedView:AdherenceCheckBox id="adherenceCheckBox" verticalCenter="0" horizontalCenter="0"
									skinClass="collaboRhythm.plugins.schedule.shared.view.AdherenceCheckBoxSkin"
									selected="{_scheduleItemOccurrence.adherenceItem != null}"
									click="adherenceCheckBoxClickHandler(event)"
									enabled="{isAdherenceCheckBoxEnabled(_scheduleItemOccurrence.adherenceItem, _scheduleItemOccurrence.adherenceItem ? _scheduleItemOccurrence.adherenceItem.pendingAction : null, _scheduleModel ? _scheduleModel.settings.adherenceVoidingEnabled : null)}"/>
			<s:RichText id="additionalInformationLabel" width="80"
						text="{updateAdditionalAdherenceInformation(_scheduleItemOccurrence.adherenceItem)}"
						verticalCenter="48" horizontalCenter="0" visible="false" mouseEnabled="false"/>
		</s:Group>
	</s:HGroup>

	<s:Line width="100%" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x000000"/>
		</s:stroke>
	</s:Line>
</s:ItemRenderer>
