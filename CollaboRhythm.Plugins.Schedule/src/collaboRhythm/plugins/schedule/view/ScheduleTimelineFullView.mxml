<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler()"
		 xmlns:views="collaboRhythm.plugins.schedule.view.*"
		 implements="collaboRhythm.plugins.schedule.view.IScheduleFullView"
		 remove="removeHandler()"
		 enabled="{!_scheduleModel.record.isSaving}"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
		import collaboRhythm.plugins.schedule.controller.ScheduleAppController;
		import collaboRhythm.plugins.schedule.controller.ScheduleTimelineController;
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.model.ScheduleTimelineModel;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionCreationController;
		import collaboRhythm.plugins.schedule.shared.model.MoveData;
		import collaboRhythm.plugins.schedule.shared.model.ScheduleGroup;
		import collaboRhythm.plugins.schedule.shared.view.ScheduleTimelineViewEvent;

		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.collections.ArrayCollection;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.ResizeEvent;

		import spark.components.Button;
		import spark.components.View;
		import spark.skins.mobile.TransparentActionButtonSkin;

		public static const TIMELINE_VIEW_HEIGHT:Number = 50;
		public static const ADHERENCE_WINDOW_INITIAL_HEIGHT:Number = 50;

		public static const DURATION:Number = 300;
		public static const FRICTION:Number = 0.3;

		private var _scheduleTimelineController:ScheduleTimelineController;
		[Bindable]
		private var _scheduleModel:ScheduleModel;
		[Bindable]
		private var _scheduleTimelineModel:ScheduleTimelineModel;
		private var _scheduleGroupsCollection:ArrayCollection;
		private var _scheduleGroupTimelineViews:Vector.<ScheduleGroupTimelineView> = new Vector.<ScheduleGroupTimelineView>();

		private var _isCreationComplete:Boolean = false;

		private var _initializedChangeWatcher:ChangeWatcher;

		public function init(scheduleAppController:ScheduleAppController, scheduleModel:ScheduleModel):void
		{
			_scheduleTimelineController = scheduleAppController.scheduleTimelineController;
			_scheduleModel = scheduleModel;
			_scheduleTimelineModel = _scheduleModel.scheduleTimelineModel;

			_scheduleGroupsCollection = _scheduleModel.scheduleGroupsCollection;

			_scheduleGroupsCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE,
					scheduleGroupsCollectionChangeHandler, false, 0, true);

			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_DOWN,
					scheduleGroupTimelineViewMouseDownHandler, false, 0, true);
			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_MOVE,
					scheduleGroupTimelineViewMouseMoveHandler, false, 0, true);
			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_UP,
					scheduleGroupTimelineViewMouseUpHandler, false, 0, true);

			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_SPOTLIGHT_VIEW_MOUSE_DOWN,
					scheduleGroupSpotlightViewMouseDownHandler, false, 0, true);
			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_SPOTLIGHT_VIEW_LEFT_MOUSE_MOVE,
					scheduleGroupSpotlightViewLeftMouseMoveHandler, false, 0, true);
			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_SPOTLIGHT_VIEW_RIGHT_MOUSE_MOVE,
					scheduleGroupSpotlightViewRightMouseMoveHandler, false, 0, true);
			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_SPOTLIGHT_VIEW_MOUSE_UP,
					scheduleGroupSpotlightViewMouseUpHandler, false, 0, true);

			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_ITEM_TIMELINE_VIEW_MOUSE_DOWN,
					scheduleItemOccurrenceTimelineViewMouseDownHandler, false, 0, true);

			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_ITEM_TIMELINE_VIEW_EDIT,
					scheduleItemOccurrenceTimelineViewEditHandler, false, 0, true);
			this.addEventListener(ScheduleTimelineViewEvent.SCHEDULE_ITEM_TIMELINE_VIEW_UNSCHEDULE,
					scheduleItemOccurrenceTimelineViewUnscheduleHandler, false, 0, true);

			_initializedChangeWatcher = BindingUtils.bindSetter(initializedChangeHandler,
					_scheduleModel,
					"isInitialized", false, true);
		}

		protected function get sparkView():View
		{
			return owner as View;
		}

		private function saveButton_clickHandler(event:MouseEvent):void
		{
			_scheduleTimelineController.save();
		}

		override protected function createChildren():void
		{
			super.createChildren();

			for each (var healthActionCreationController:IHealthActionCreationController in
					_scheduleModel.healthActionCreationControllers)
			{
				var button:Button = new Button();
				button.label = healthActionCreationController.buttonLabel;
				button.addEventListener(MouseEvent.CLICK, healthActionCreationController.showHealthActionCreationView);
				createHealthActionButtonsHGroup.addElement(button);
			}
		}

		private function creationCompleteHandler():void
		{
			if (sparkView)
			{
				var saveButton:Button = new Button();
				saveButton.label = "Save";
				saveButton.addEventListener(MouseEvent.CLICK, saveButton_clickHandler, false, 0, true);
				saveButton.setStyle("skinClass", TransparentActionButtonSkin);
				sparkView.actionContent.unshift(saveButton);
			}

			if (_scheduleModel.isInitialized)
			{
				removeSorts();
				createScheduleGroupViews();
			}
			_isCreationComplete = true;
		}

		private function initializedChangeHandler(isInitialized:Boolean):void
		{
			if (isInitialized && _isCreationComplete)
			{
				removeSorts();
				createScheduleGroupViews();
			}
		}

		private function removeSorts():void
		{
			for each (var scheduleGroup:ScheduleGroup in _scheduleGroupsCollection)
			{
				scheduleGroup.scheduleItemsOccurrencesCollection.sort = null;
				scheduleGroup.scheduleItemsOccurrencesCollection.refresh();
			}
		}

		private function createScheduleGroupViews():void
		{
			for each (var scheduleGroup:ScheduleGroup in _scheduleGroupsCollection)
			{
				var scheduleGroupTimelineView:ScheduleGroupTimelineView = createScheduleGroupView(scheduleGroup);
				if (scheduleGroup.scheduleItemsOccurrencesCollection.length == 1)
				{
					scheduleGroupTimelineView.frame.visible = false;
				}
			}
		}

		private function scheduleGroupsCollectionChangeHandler(event:CollectionEvent):void
		{
			if (event.kind == CollectionEventKind.ADD)
			{
				if (_isCreationComplete && _scheduleModel.isInitialized)
				{
					for each (var scheduleGroupAdded:ScheduleGroup in event.items)
					{
						var scheduleGroupTimelineView:ScheduleGroupTimelineView = createScheduleGroupView(scheduleGroupAdded);
						scheduleGroupTimelineView.frame.visible = false;
					}
				}
			}
			else if (event.kind == CollectionEventKind.REMOVE)
			{
				for each (var scheduleGroupRemoved:ScheduleGroup in event.items)
				{
					destroyScheduleGroupView(scheduleGroupRemoved);
				}
			}
			else if (event.kind == CollectionEventKind.RESET)
			{
				var numScheduleGroupTimelineViews:int = _scheduleGroupTimelineViews.length - 1;
				for (var scheduleGroupTimelineViewIndex:int = numScheduleGroupTimelineViews; scheduleGroupTimelineViewIndex >= 0; scheduleGroupTimelineViewIndex--)
				{
					var scheduleGroupTimelineView:ScheduleGroupTimelineView = _scheduleGroupTimelineViews[scheduleGroupTimelineViewIndex];
					destroyScheduleGroupView(scheduleGroupTimelineView.scheduleGroup);
				}
			}
		}

		public function createScheduleGroupView(scheduleGroup:ScheduleGroup):ScheduleGroupTimelineView
		{
			if (!_scheduleTimelineModel.timeWidth)
			{
				calculateTimeWidth();
				updateContainerHeight();
			}
			var scheduleGroupTimelineView:ScheduleGroupTimelineView = new ScheduleGroupTimelineView();
			scheduleGroupTimelineView.init(_scheduleModel, _scheduleTimelineModel, scheduleGroup,
					scheduleGroupsContainer, this);
			scheduleGroupsContainer.addElement(scheduleGroupTimelineView);
			_scheduleGroupTimelineViews.push(scheduleGroupTimelineView);

			return scheduleGroupTimelineView;
		}

		public function destroyScheduleGroupView(scheduleGroup:ScheduleGroup):void
		{
			for each (var scheduleGroupTimelineView:ScheduleGroupTimelineView in _scheduleGroupTimelineViews)
			{
				if (scheduleGroupTimelineView.scheduleGroup == scheduleGroup)
				{
					for each (var scheduleItemOccurrenceTimelineView:ScheduleItemOccurrenceTimelineView in
							scheduleGroupTimelineView.scheduleItemTimelineViews)
					{
						scheduleGroupTimelineView.scheduleItemsContainer.removeElement(scheduleItemOccurrenceTimelineView);
						scheduleItemOccurrenceTimelineView = null;
					}
					scheduleGroupTimelineView.scheduleItemTimelineViews = null;
					scheduleGroupSpotlightViewsContainer.removeElement(scheduleGroupTimelineView.scheduleGroupSpotlightView);
					scheduleGroupTimelineView.scheduleGroupSpotlightView = null;

					var scheduleGroupTimelineViewIndex:int = _scheduleGroupTimelineViews.indexOf(scheduleGroupTimelineView);
					_scheduleGroupTimelineViews.splice(scheduleGroupTimelineViewIndex, 1);
					scheduleGroupsContainer.removeElement(scheduleGroupTimelineView);
					scheduleGroupTimelineView = null;
				}
			}
		}

		private function calculateTimeWidth():void
		{
			_scheduleTimelineModel.timeWidth = (scheduleGroupsContainer.width -
					ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_WIDTH +
					(ScheduleItemOccurrenceTimelineView.SCHEDULE_ITEM_TIMELINE_VIEW_PICTURE_WIDTH / 2) -
					ScheduleGroupTimelineView.SCHEDULE_GROUP_TIMELINE_VIEW_BUFFER_WIDTH) / 26;
		}

		private function updateContainerHeight():void
		{
			_scheduleTimelineModel.containerHeight = scheduleGroupsContainer.height;
		}

		public function resizeHandler(event:ResizeEvent):void
		{
			calculateTimeWidth();
			updateContainerHeight();
		}

		private function addContainerMoveData(moveData:MoveData):MoveData
		{
			var scheduleGroupsContainerCoordinates:Point = scheduleGroupsContainer.globalToLocal(new Point(moveData.stageX,
					moveData.stageY));

			moveData.containerX = scheduleGroupsContainerCoordinates.x;
			moveData.containerY = scheduleGroupsContainerCoordinates.y;
			moveData.containerWidth = scheduleGroupsContainer.width;
			moveData.containerHeight = scheduleGroupsContainer.height;

			return moveData;
		}

		private function scheduleGroupTimelineViewMouseDownHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.grabScheduleGroup(addContainerMoveData(event.moveData));
		}

		private function scheduleGroupTimelineViewMouseMoveHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.moveScheduleGroup(addContainerMoveData(event.moveData));
		}

		private function scheduleGroupTimelineViewMouseUpHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.dropScheduleGroup(addContainerMoveData(event.moveData));
		}

		private function scheduleGroupSpotlightViewMouseDownHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.grabScheduleGroupSpotlight(addContainerMoveData(event.moveData));
		}

		private function scheduleGroupSpotlightViewLeftMouseMoveHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.resizeScheduleGroupSpotlight(addContainerMoveData(event.moveData), true);
		}

		private function scheduleGroupSpotlightViewRightMouseMoveHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.resizeScheduleGroupSpotlight(addContainerMoveData(event.moveData), false);
		}

		private function scheduleGroupSpotlightViewMouseUpHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.dropScheduleGroupSpotlight(addContainerMoveData(event.moveData));
		}

		private function scheduleItemOccurrenceTimelineViewMouseDownHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.grabScheduleItemOccurrence(addContainerMoveData(event.moveData));
		}

		private function scheduleItemOccurrenceTimelineViewEditHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.editItem(event.moveData);
		}

		private function scheduleItemOccurrenceTimelineViewUnscheduleHandler(event:ScheduleTimelineViewEvent):void
		{
			_scheduleTimelineController.unscheduleItem(event.moveData);
		}

		public function destroyChildren():void
		{
			scheduleGroupsContainer.removeAllElements();
			scheduleGroupSpotlightViewsContainer.removeAllElements();
			_scheduleGroupTimelineViews = new Vector.<ScheduleGroupTimelineView>();
		}

		private function removeHandler():void
		{
			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_DOWN,
					scheduleGroupTimelineViewMouseDownHandler);
			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_MOVE,
					scheduleGroupTimelineViewMouseMoveHandler);
			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_TIMELINE_VIEW_MOUSE_UP,
					scheduleGroupTimelineViewMouseUpHandler);

			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_SPOTLIGHT_VIEW_MOUSE_DOWN,
					scheduleGroupSpotlightViewMouseDownHandler);
			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_SPOTLIGHT_VIEW_LEFT_MOUSE_MOVE,
					scheduleGroupSpotlightViewLeftMouseMoveHandler);
			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_SPOTLIGHT_VIEW_RIGHT_MOUSE_MOVE,
					scheduleGroupSpotlightViewRightMouseMoveHandler);
			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_GROUP_SPOTLIGHT_VIEW_MOUSE_UP,
					scheduleGroupSpotlightViewMouseUpHandler);

			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_ITEM_TIMELINE_VIEW_MOUSE_DOWN,
					scheduleItemOccurrenceTimelineViewMouseDownHandler);

			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_ITEM_TIMELINE_VIEW_EDIT,
					scheduleItemOccurrenceTimelineViewEditHandler);
			this.removeEventListener(ScheduleTimelineViewEvent.SCHEDULE_ITEM_TIMELINE_VIEW_UNSCHEDULE,
					scheduleItemOccurrenceTimelineViewUnscheduleHandler);

			_initializedChangeWatcher.unwatch();
		}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="#E6E7E8"/>
		</s:fill>
	</s:Rect>
	<views:TimelineStripView id="timelineStripView" width="100%" height="{TIMELINE_VIEW_HEIGHT}" bottom="0"/>
	<s:Group id="scheduleGroupSpotlightViewsContainer" width="100%" height="100%"/>
	<s:Group id="scheduleGroupsContainer" width="100%" top="0" bottom="{TIMELINE_VIEW_HEIGHT}"
			 resize="resizeHandler(event)"/>
	<s:HGroup id="createHealthActionButtonsHGroup" left="10" right="10" top="10" bottom="10" gap="20"/>
</s:Group>