<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:sharedView="collaboRhythm.plugins.schedule.shared.view.*">
	<fx:Style>
		#additionalAdherenceInformationLabel {
			fontSize: 24;
			fontWeight: bold;
			textAlign: center;
			lineBreak: toFit;
		}
	</fx:Style>
	<fx:Script>
        <![CDATA[
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionListViewAdapter;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;

		import collaboRhythm.iHAART.cloudMessaging.controller.CloudMessagingController;
		import collaboRhythm.iHAART.controller.IHAARTEventDispatcher;
		import collaboRhythm.iHAART.model.events.IHAARTEvent;
		import collaboRhythm.iHAART.sqlStore.controller.SQLStoreController;
		import collaboRhythm.shared.model.services.WorkstationKernel;
		import collaboRhythm.shared.model.settings.Settings;

		import mx.core.FlexGlobals;

		import mx.core.IVisualElement;

		import spark.components.Image;
		import spark.filters.GlowFilter;

		[Bindable]
		private var _scheduleItemOccurrence:ScheduleItemOccurrence;
		private var _dbController:SQLStoreController;
		private var _settings:Settings;

		public function init(scheduleItemOccurrence:ScheduleItemOccurrence, scheduleModel:ScheduleModel):void
		{
			_scheduleItemOccurrence = scheduleItemOccurrence;

			var scheduleItemOccurrenceReportingViewAdapter:IHealthActionListViewAdapter = scheduleModel.healthActionListViewAdapterFactory.createScheduledHealthActionViewAdapter(_scheduleItemOccurrence,
					scheduleModel);

			if (settings.iHAARTOnly)
			{
				var dispatcher:IHAARTEventDispatcher = new IHAARTEventDispatcher();
				dispatcher.dispatchEvent(new IHAARTEvent(IHAARTEvent.SCHEDULE_LOADED,
						settings.gcmAccount,
						false,
						false));
			}

			if (scheduleItemOccurrenceReportingViewAdapter)
			{
				var customView:IVisualElement = scheduleItemOccurrenceReportingViewAdapter.createCustomView();
				if (customView)
				{
					imageRegion.addElement(customView);
				}
				else
				{
					var image:Image = scheduleItemOccurrenceReportingViewAdapter.createImage();
					if (image)
					{
						image.percentWidth = 100;
						image.percentHeight = 100;
						image.smooth = true;
						imageRegion.addElement(image);
					}
				}
				imageRegion.left = 0;
				imageRegion.right = 0;
				imageRegion.top = 0;
				imageRegion.bottom = 0;


				if (scheduleItemOccurrenceReportingViewAdapter.additionalAdherenceInformation &&
						scheduleItemOccurrenceReportingViewAdapter.additionalAdherenceInformation != "...")
				{
					scaleFontToFit(scheduleItemOccurrenceReportingViewAdapter, additionalAdherenceInformationLabel, 24);
					additionalAdherenceInformationLabel.text = scheduleItemOccurrenceReportingViewAdapter.additionalAdherenceInformation;
					additionalAdherenceInformationLabel.visible = true;
				}
				else
				{
					adherenceImage.verticalCenter = 0;
				}
			}
		}

		public function get scheduleItemOccurrence():ScheduleItemOccurrence
		{
			return _scheduleItemOccurrence;
		}

		public function set scheduleItemOccurrence(value:ScheduleItemOccurrence):void
		{
			_scheduleItemOccurrence = value;
		}

		public static function scaleFontToFit(scheduleItemOccurrenceReportingViewAdapter:IHealthActionListViewAdapter,
											  richText:RichText, defaultFontSize:int):void
		{
			if (richText.stage)
			{
				scaleFontToFitOnResize(scheduleItemOccurrenceReportingViewAdapter, richText, defaultFontSize);
			}
			else
			{
				richText.addEventListener(Event.ADDED_TO_STAGE,
						function (event:Event):void
						{
							scaleFontToFitOnResize(scheduleItemOccurrenceReportingViewAdapter, richText, defaultFontSize);
						});
			}
		}

		private static function scaleFontToFitOnResize(scheduleItemOccurrenceReportingViewAdapter:IHealthActionListViewAdapter,
												richText:RichText, defaultFontSize:int):void
		{
			scaleFontToFitNow(scheduleItemOccurrenceReportingViewAdapter, richText,
					defaultFontSize);
			richText.parent.addEventListener(Event.RESIZE,
					function (event:Event):void
					{
						scaleFontToFitNow(scheduleItemOccurrenceReportingViewAdapter, richText,
								defaultFontSize);
					});
		}

		private static function scaleFontToFitNow(scheduleItemOccurrenceReportingViewAdapter:IHealthActionListViewAdapter,
												  richText:RichText, defaultFontSize:int):void
		{
			// Manually split the text (on spaces) and check the max line length because TextLineMetrics assumes that text is in a single line, whereas the RichText is using "lineBreak: toFit"
			var lines:Array = scheduleItemOccurrenceReportingViewAdapter.additionalAdherenceInformation.split(" ");
			var longestLineWidth:Number = 0;
			for each (var line:String in lines)
			{
				var textLineMetrics:TextLineMetrics = richText.measureText(line);
				// TODO: figure out why measuring isn't working correctly with embedAsCFF fonts (Myriad Pro); for now we are using a workaround to guess the measurement
				if (textLineMetrics.width == 0)
				{
					textLineMetrics.width = line.length * defaultFontSize * 0.5;
				}
				if (textLineMetrics.width > longestLineWidth)
					longestLineWidth = textLineMetrics.width;
			}
			var parentWidth:Number = richText.parent.width;

			// Account for the glow or margin or padding or something that limits the amount of text beyond just the parent width
			longestLineWidth += parentWidth / 4;
			if (longestLineWidth > parentWidth && parentWidth > 0)
			{
				richText.setStyle("fontSize", defaultFontSize * parentWidth / longestLineWidth);
				richText.setStyle("lineHeight", defaultFontSize * 0.9 * parentWidth / longestLineWidth);
			}
			else
			{
				richText.setStyle("fontSize", defaultFontSize);
				richText.clearStyle("lineHeight");
			}
		}

		public function get settings():Settings
		{
			if (!_settings)
			{
				_settings = WorkstationKernel.instance.resolve(Settings) as Settings;
			}
			return _settings;
		}
		]]>
    </fx:Script>

	<s:Group id="imageContainerGroup" width="100%" height="100%">
		<s:Group id="imageRegion"/>
	</s:Group>


	<s:Group id="adherenceImage" width="70%" height="70%" horizontalCenter="0">
		<sharedView:AdherenceCheck width="{adherenceImage.width}" height="{adherenceImage.height}"
					  filters="{[new GlowFilter(0xFFFFFF, 0.7, this.width / 8, this.width / 8, this.width / 8)]}"
					  visible="{_scheduleItemOccurrence.adherenceItem != null}"/>
	</s:Group>

	<s:RichText id="additionalAdherenceInformationLabel" visible="false" width="{this.width}" bottom="0" horizontalCenter="-4"
			 filters="{[new GlowFilter(0xFFFFFF, 0.7, this.width / 8, this.width / 8, this.width / 8)]}"/>

</s:Group>
