<?xml version="1.0"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
							xmlns:s="library://ns.adobe.com/flex/spark"
							xmlns:mx="library://ns.adobe.com/flex/mx"
							xmlns:view="collaboRhythm.tablet.view.*"
							xmlns:sharedView="collaboRhythm.shared.view.*"
							firstView="collaboRhythm.tablet.view.TabletHomeView"
							skinClass="collaboRhythm.tablet.view.skins.CollaboRhythmTabletApplicationSkin"
							creationComplete="creationCompleteHandler(event)"
							runtimeDPIProvider="collaboRhythm.tablet.model.EmulatorDpiProvider"
							currentState="uninitialized"
							mouseDown="mouseDownHandler(event)"
							mouseMove="mouseMoveHandler(event)"
							mouseUp="mouseUpHandler(event)">
	<s:states>
		<s:State name="uninitialized"/>

		<s:State name="clinicianTabletHomeViewCollaborationInactive"
				 stateGroups="clinician, TabletHomeView, CollaborationInactive, clinicianCollaborationInactive"/>
		<s:State name="clinicianTabletHomeViewCollaborationOutOfSync"
				 stateGroups="clinician, TabletHomeView, CollaborationOutOfSync, clinicianCollaborationOutOfSync"/>
		<s:State name="clinicianTabletHomeViewCollaborationInvitationSent"
				 stateGroups="clinician, TabletHomeView, CollaborationInvitationSent"/>
		<s:State name="clinicianTabletHomeViewCollaborationInvitationReceived"
				 stateGroups="clinician, TabletHomeView, CollaborationInvitationReceived"/>
		<s:State name="clinicianTabletHomeViewCollaborationInvitationRejected"
				 stateGroups="clinician, TabletHomeView, CollaborationInvitationRejected"/>
		<s:State name="clinicianTabletHomeViewCollaborationActive"
				 stateGroups="clinician, TabletHomeView, CollaborationActive, TabletHomeViewCollaborationActive"/>

		<s:State name="clinicianCollaborationVideoViewCollaborationInactive"
				 stateGroups="clinician, CollaborationVideoView, notHome, CollaborationInactive, clinicianCollaborationInactive"/>
		<s:State name="clinicianCollaborationVideoViewCollaborationOutOfSync"
				 stateGroups="clinician, CollaborationVideoView, notHome, CollaborationOutOfSync, clinicianCollaborationOutOfSync"/>
		<s:State name="clinicianCollaborationVideoViewCollaborationInvitationSent"
				 stateGroups="clinician, CollaborationVideoView, notHome, CollaborationInvitationSent"/>
		<s:State name="clinicianCollaborationVideoViewCollaborationInvitationReceived"
				 stateGroups="clinician, CollaborationVideoView, notHome, CollaborationInvitationReceived"/>
		<s:State name="clinicianCollaborationVideoViewCollaborationInvitationRejected"
				 stateGroups="clinician, CollaborationVideoView, notHome, CollaborationInvitationRejected"/>
		<s:State name="clinicianCollaborationVideoViewCollaborationActive"
				 stateGroups="clinician, CollaborationVideoView, notHome, CollaborationActive"/>

		<s:State name="clinicianOtherCollaborationInactive"
				 stateGroups="clinician, Other, notHome, CollaborationInactive, clinicianCollaborationInactive"/>
		<s:State name="clinicianOtherCollaborationOutOfSync"
				 stateGroups="clinician, Other, notHome, CollaborationOutOfSync, clinicianCollaborationOutOfSync"/>
		<s:State name="clinicianOtherCollaborationInvitationSent"
				 stateGroups="clinician, Other, notHome, CollaborationInvitationSent"/>
		<s:State name="clinicianOtherCollaborationInvitationReceived"
				 stateGroups="clinician, Other, notHome, CollaborationInvitationReceived"/>
		<s:State name="clinicianOtherCollaborationInvitationRejected"
				 stateGroups="clinician, Other, notHome, CollaborationInvitationRejected"/>
		<s:State name="clinicianOtherCollaborationActive"
				 stateGroups="clinician, Other, notHome, CollaborationActive, OtherCollaborationActive"/>

		<s:State name="patientTabletHomeViewCollaborationInactive"
				 stateGroups="patient, TabletHomeView, CollaborationInactive, patientCollaborationInactive"/>
		<s:State name="patientTabletHomeViewCollaborationOutOfSync"
				 stateGroups="patient, TabletHomeView, CollaborationOutOfSync, patientCollaborationOutOfSync"/>
		<s:State name="patientTabletHomeViewCollaborationInvitationSent"
				 stateGroups="patient, TabletHomeView, CollaborationInvitationSent"/>
		<s:State name="patientTabletHomeViewCollaborationInvitationReceived"
				 stateGroups="patient, TabletHomeView, CollaborationInvitationReceived"/>
		<s:State name="patientTabletHomeViewCollaborationInvitationRejected"
				 stateGroups="patient, TabletHomeView, CollaborationInvitationRejected"/>
		<s:State name="patientTabletHomeViewCollaborationActive"
				 stateGroups="patient, TabletHomeView, CollaborationActive, TabletHomeViewCollaborationActive"/>

		<s:State name="patientCollaborationVideoViewCollaborationInactive"
				 stateGroups="patient, CollaborationVideoView, notHome, CollaborationInactive, patientCollaborationInactive"/>
		<s:State name="patientCollaborationVideoViewCollaborationInvitationSent"
				 stateGroups="patient, CollaborationVideoView, notHome, CollaborationInvitationSent"/>
		<s:State name="patientCollaborationVideoViewCollaborationInvitationReceived"
				 stateGroups="patient, CollaborationVideoView, notHome, CollaborationInvitationReceived"/>
		<s:State name="patientCollaborationVideoViewCollaborationInvitationRejected"
				 stateGroups="patient, CollaborationVideoView, notHome, CollaborationInvitationRejected"/>
		<s:State name="patientCollaborationVideoViewCollaborationActive"
				 stateGroups="patient, CollaborationVideoView, notHome, CollaborationActive"/>

		<s:State name="patientOtherCollaborationInactive"
				 stateGroups="patient, Other, notHome, CollaborationInactive, patientCollaborationInactive"/>
		<s:State name="patientOtherCollaborationOutOfSync"
				 stateGroups="patient, Other, notHome, CollaborationOutOfSync, patientCollaborationOutOfSync"/>
		<s:State name="patientOtherCollaborationInvitationSent"
				 stateGroups="patient, Other, notHome, CollaborationInvitationSent"/>
		<s:State name="patientOtherCollaborationInvitationReceived"
				 stateGroups="patient, Other, notHome, CollaborationInvitationReceived"/>
		<s:State name="patientOtherCollaborationInvitationRejected"
				 stateGroups="patient, Other, notHome, CollaborationInvitationRejected"/>
		<s:State name="patientOtherCollaborationActive"
				 stateGroups="patient, Other, notHome, CollaborationActive, OtherCollaborationActive"/>
	</s:states>
	<fx:Style source="defaults.css"/>
	<fx:Declarations>
		<s:Fade id="synchronizeIconFadeEffect" target="{synchronizeIcon}" alphaFrom="1" alphaTo="0.1"
				repeatBehavior="reverse" repeatCount="0"/>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import collaboRhythm.core.view.AboutApplicationView;
		import collaboRhythm.core.view.BusyView;
		import collaboRhythm.core.view.ConnectivityView;
		import collaboRhythm.shared.collaboration.controller.CollaborationController;
		import collaboRhythm.shared.collaboration.model.CollaborationModel;
		import collaboRhythm.shared.collaboration.model.CollaborationPointerSynchronizationEvent;
		import collaboRhythm.shared.collaboration.view.CollaborationVideoView;
		import collaboRhythm.shared.model.Account;
		import collaboRhythm.shared.model.settings.Settings;
		import collaboRhythm.shared.view.tablet.TabletViewBase;
		import collaboRhythm.tablet.controller.TabletApplicationController;
		import collaboRhythm.tablet.view.SelectRecordView;
		import collaboRhythm.tablet.view.TabletHomeView;

		import mx.binding.utils.BindingUtils;
		import mx.events.FlexEvent;

		import spark.primitives.Graphic;

		[Bindable]
		private var _applicationController:TabletApplicationController;

		[SkinPart(required="false")]
		public var connectivityView:ConnectivityView;

		[SkinPart(required="false")]
		public var busyView:BusyView;

		[SkinPart(required="false")]
		public var aboutApplicationView:AboutApplicationView;

		[SkinPart(required="false")]
		public var patientPointer:Graphic;

		[SkinPart(required="false")]
		public var clinicianPointer:Graphic;

		[Bindable]
		private var _collaborationController:CollaborationController;
		private var _mouseDown:Boolean;

		override protected function invokeHandler(event:InvokeEvent):void
		{
			super.invokeHandler(event);
			if (event.arguments.length > 0)
			{
				trace("Arguments: " + event.arguments.concat(" "));
			}
		}

		protected function creationCompleteHandler(event:FlexEvent):void
		{
			if (actionBar)
			{
				activeRecordProfileImage.height = activeRecordProfileImage.width = actionBar.getPreferredBoundsHeight();
			}
			this.addEventListener(FlexEvent.MENU_KEY_PRESSED, menuKeyPressedHandler);

			main();
		}

		private function main():void
		{
			_applicationController = new TabletApplicationController(this);
			_applicationController.main();

			aboutApplicationView.settings = _applicationController.settings;

			_collaborationController = _applicationController.collaborationController;

			_collaborationController.collaborationModel.collaborationLobbyNetConnectionService.addEventListener(CollaborationPointerSynchronizationEvent.SHOW_POINTER,
					showPointerHandler);
			_collaborationController.collaborationModel.collaborationLobbyNetConnectionService.addEventListener(CollaborationPointerSynchronizationEvent.MOVE_POINTER,
					movePointerHandler);
			_collaborationController.collaborationModel.collaborationLobbyNetConnectionService.addEventListener(CollaborationPointerSynchronizationEvent.HIDE_POINTER,
					hidePointerHandler);

			BindingUtils.bindSetter(activeView_changeHandler, navigator, "activeView");
			BindingUtils.bindSetter(mode_changeHandler, _applicationController.settings, "mode");
			BindingUtils.bindSetter(collaborationState_changeHandler, _collaborationController.collaborationModel,
					"collaborationState");
		}

		private function showPointerHandler(event:CollaborationPointerSynchronizationEvent):void
		{
			showPointer("remote", event.x, event.y)
		}

		private function movePointerHandler(event:CollaborationPointerSynchronizationEvent):void
		{
			movePointer("remote", event.x, event.y);
		}

		private function hidePointerHandler(event:CollaborationPointerSynchronizationEvent):void
		{
			hidePointer("remote");
		}

		private function collaborationState_changeHandler(value:String):void
		{
			updateState();
		}

		private function activeView_changeHandler(value:TabletViewBase):void
		{
			updateState();
		}

		private function mode_changeHandler(value:int):void
		{
			updateState();
		}

		private function updateState():void
		{
			if (_applicationController)
			{
				var activeView:String;

				if (navigator.activeView as TabletHomeView)
				{
					activeView = "TabletHomeView";
				}
				else if (navigator.activeView as CollaborationVideoView)
				{
					activeView = "CollaborationVideoView";
				}
				else
				{
					activeView = "Other";
				}

				currentState = _applicationController.settings.mode + activeView +
						_collaborationController.collaborationModel.collaborationState;

				if (_collaborationController.collaborationModel.collaborationState ==
						CollaborationModel.COLLABORATION_OUT_OF_SYNC)
				{
					synchronizeIconFadeEffect.play();
				}
				else
				{
					if (synchronizeIconFadeEffect.isPlaying)
					{
						synchronizeIconFadeEffect.stop();
					}
					synchronizeIcon.alpha = 1;
				}
			}
		}

		public function get tabletHomeView():TabletHomeView
		{
			return navigator.activeView as TabletHomeView;
		}

		private function menuKeyPressedHandler(event:FlexEvent):void
		{
			if (connectivityView.visible)
			{
				event.preventDefault();
			}
		}

		public function get selectRecordView():SelectRecordView
		{
			return navigator.activeView as SelectRecordView;
		}

		private function mouseDownHandler(event:MouseEvent):void
		{
			if (_collaborationController.collaborationModel.collaborationState ==
					CollaborationModel.COLLABORATION_ACTIVE)
			{
				_mouseDown = true;
				showPointer("local", event.stageX, event.stageY);
			}
		}

		private function showPointer(source:String, x:int, y:int):void
		{
			if (source == "local")
			{
				_collaborationController.collaborationModel.collaborationLobbyNetConnectionService.sendCollaborationPointerSynchronization(CollaborationPointerSynchronizationEvent.SHOW_POINTER,
						x, y);
			}

			updatePointer(source, true, x, y);
		}

		private function updatePointer(source:String, visible:Boolean, x:int = NaN, y:int = NaN):void
		{
			if ((source == "local" && _applicationController.settings.mode == Settings.MODE_PATIENT) ||
					(source == "remote" && _applicationController.settings.mode == Settings.MODE_CLINICIAN))
			{
				patientPointer.visible = visible;
				if (visible)
				{
					patientPointer.x = x;
					patientPointer.y = y;
				}
			}
			else if ((source == "local" && _applicationController.settings.mode == Settings.MODE_CLINICIAN) ||
					(source == "remote" && _applicationController.settings.mode == Settings.MODE_PATIENT))
			{
				clinicianPointer.visible = visible;
				if (visible)
				{
					clinicianPointer.x = x;
					clinicianPointer.y = y;
				}
			}
		}

		private function mouseMoveHandler(event:MouseEvent):void
		{
			if (_collaborationController.collaborationModel.collaborationState ==
					CollaborationModel.COLLABORATION_ACTIVE && _mouseDown)
			{
				movePointer("local", event.stageX, event.stageY);
			}
		}

		private function movePointer(source:String, x:int, y:int):void
		{
			if (source == "local")
			{
				_collaborationController.collaborationModel.collaborationLobbyNetConnectionService.sendCollaborationPointerSynchronization(CollaborationPointerSynchronizationEvent.MOVE_POINTER,
						x, y);
			}

			updatePointer(source, true, x,  y);
		}

		private function mouseUpHandler(event:MouseEvent):void
		{
			if (_collaborationController.collaborationModel.collaborationState ==
					CollaborationModel.COLLABORATION_ACTIVE)
			{
				_mouseDown = false;
				hidePointer("local");
			}
		}

		private function hidePointer(source:String):void
		{
			if (source == "local")
			{
				_collaborationController.collaborationModel.collaborationLobbyNetConnectionService.sendCollaborationPointerSynchronization(CollaborationPointerSynchronizationEvent.HIDE_POINTER,
						x, y);
			}

			updatePointer(source, false);
		}

		private function homeButton_clickHandler():void
		{
			(navigator.activeView as TabletViewBase).homeButton_clickHandler();
		}

		private function synchronize():void
		{
			navigator.popToFirstView();
			_applicationController.synchronize()
		}
		]]></fx:Script>
	<s:navigationContent>
		<s:HGroup gap="0">
			<s:Group includeInLayout="{_applicationController.activeRecordAccount != null}"
					 visible="{_applicationController.activeRecordAccount != null}">
				<s:Button width="{backGroup.width}" height="{backGroup.height}" click="homeButton_clickHandler()"/>
				<s:HGroup id="backGroup" verticalAlign="middle" gap="0" mouseEnabled="false"
						  mouseChildren="false">
					<view:BackIcon id="backIcon" visible="false" visible.notHome="true"/>
					<s:Image id="activeRecordProfileImage"
							 source="{_applicationController.activeRecordAccount.imageURI}" smooth="true"/>
					<s:VGroup gap="1" paddingTop="3" paddingLeft="5" paddingRight="10">
						<s:Label id="activeRecordGivenName"
								 text="{_applicationController.activeRecordAccount.primaryRecord.demographics.Name.givenName}"/>
						<s:Label id="activeRecordFamilyName"
								 text="{_applicationController.activeRecordAccount.primaryRecord.demographics.Name.familyName}"/>
					</s:VGroup>
				</s:HGroup>
			</s:Group>
			<s:HGroup gap="0" includeInLayout="{_applicationController.activeRecordAccount != null}"
					  visible="{_applicationController.activeRecordAccount != null}">
				<s:Group>
					<s:Button width="44" height="46"
							  enabled="false" enabled.patientCollaborationInactive="true"
							  click="_applicationController.setCollaborationLobbyConnectionStatus()"/>
					<sharedView:OnlineIcon width="24" height="32" verticalCenter="0" horizontalCenter="0"
										   mouseEnabled="false" mouseChildren="false"
										   visible="{_applicationController.activeRecordAccount.collaborationLobbyConnectionStatus == Account.COLLABORATION_LOBBY_AVAILABLE}"/>
					<sharedView:OfflineIcon width="24" height="32" verticalCenter="0" horizontalCenter="0"
											mouseEnabled="false" mouseChildren="false"
											visible="{_applicationController.activeRecordAccount.collaborationLobbyConnectionStatus == Account.COLLABORATION_LOBBY_NOT_CONNECTED}"/>
					<sharedView:AwayIcon width="24" height="32" verticalCenter="0" horizontalCenter="0"
										 mouseEnabled="false" mouseChildren="false"
										 visible="{_applicationController.activeRecordAccount.collaborationLobbyConnectionStatus == Account.COLLABORATION_LOBBY_AWAY}"/>
				</s:Group>
				<s:Group includeIn="clinicianCollaborationInactive"
						 includeInLayout="{_applicationController.activeRecordAccount.collaborationLobbyConnectionStatus == Account.COLLABORATION_LOBBY_AVAILABLE || _applicationController.activeRecordAccount.collaborationLobbyConnectionStatus == Account.COLLABORATION_LOBBY_AWAY}"
						 visible="{_applicationController.activeRecordAccount.collaborationLobbyConnectionStatus == Account.COLLABORATION_LOBBY_AVAILABLE || _applicationController.activeRecordAccount.collaborationLobbyConnectionStatus == Account.COLLABORATION_LOBBY_AWAY}"
						 click="_applicationController.sendCollaborationInvitation()">
					<s:Button width="46" height="46"/>
					<view:CallIcon width="26" height="26" verticalCenter="0" horizontalCenter="0" mouseEnabled="false"
								   mouseChildren="false"/>
				</s:Group>
				<s:Group includeIn="CollaborationInvitationReceived, CollaborationInvitationSent, CollaborationActive"
						 click="_applicationController.endCollaboration()">
					<s:Button width="44" height="46"/>
					<view:EndCallIcon width="26" height="26" verticalCenter="0" horizontalCenter="0"
									  mouseEnabled="false" mouseChildren="false"/>
				</s:Group>
				<s:Group includeIn="CollaborationInactive, CollaborationOutOfSync"
						 click="synchronize()">
					<s:Button width="44" height="46"/>
					<view:SynchronizeIcon id="synchronizeIcon" width="26" height="26" verticalCenter="0"
										  horizontalCenter="0"
										  mouseEnabled="false" mouseChildren="false"/>
				</s:Group>
				<s:Group includeIn="TabletHomeViewCollaborationActive, OtherCollaborationActive">
					<s:Button width="46" height="46"
							  click="_applicationController.showCollaborationVideoView()"/>
					<view:VideoIcon width="23" height="23" verticalCenter="0" horizontalCenter="0" mouseEnabled="false"
									mouseChildren="false"/>
				</s:Group>
			</s:HGroup>
		</s:HGroup>

		<!-- Instances of charting components which started causing errors (in plugins which use charts) when we upgraded to Flex SDK 4.6.0 preview -->
		<mx:LineChart visible="false" includeInLayout="false"/>
		<mx:AreaSeries visible="false" includeInLayout="false"/>
		<mx:PlotSeries visible="false" includeInLayout="false"/>
		<s:CalloutButton visible="false" includeInLayout="false"/>
		<s:Callout visible="false" includeInLayout="false"/>
		<s:DateSpinner visible='false' includeInLayout="false"/>
	</s:navigationContent>
</s:ViewNavigatorApplication>