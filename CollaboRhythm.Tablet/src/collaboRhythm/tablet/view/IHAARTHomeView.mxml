<?xml version="1.0"?>
<!--
Copyright 2014 Bree Alyeska (based on collaboRhythm work by John Moore and Scott Gilroy)

This file is part of iHAART & CollaboRhythm

iHAART and CollaboRhythm are free software: you can redistribute it and/or modify it under the terms of the
GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or
(at your option) any later  version.

iHAART and CollaboRhythm are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along with iHAART & CollaboRhythm. If not, see
<http://www.gnu.org/licenses/>.
-->

<tablet:TabletViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:tablet="collaboRhythm.shared.view.tablet.*"
					   xmlns:core="collaboRhythm.core.view.*"
					   xmlns:views="com.pialabs.eskimo"
					   xmlns:ihaart="collaboRhythm.iHAART.model.*"
					   actionBarVisible="true"
					   title="iHAART">
	<fx:Style source="../../../iHAART.css">
	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.core.model.AboutApplicationModel;
		import collaboRhythm.core.view.ConnectivityView;
		import collaboRhythm.iHAART.model.SkinnableConfirmation;
		import collaboRhythm.shared.model.services.WorkstationKernel;
		import collaboRhythm.shared.model.settings.Settings;

		import mx.collections.ArrayCollection;

		import mx.core.FlexGlobals;
		import mx.logging.Log;
		import mx.logging.ILogger;

		import spark.components.HGroup;

		import spark.components.View;

		import spark.components.supportClasses.Skin;

		import mx.core.IVisualElementContainer;
		import mx.events.FlexEvent;
		import mx.events.CloseEvent;
		import mx.rpc.http.HTTPService;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;

		import collaboRhythm.tablet.controller.IHAARTApplicationController;
		import collaboRhythm.iHAART.model.SkinnableAlert;
		import collaboRhythm.iHAART.view.skins.AlertSkin;
		import collaboRhythm.iHAART.cloudMessaging.controller.CloudMessagingController;
		import collaboRhythm.iHAART.sqlStore.controller.SQLStoreController;
		import collaboRhythm.iHAART.model.events.IHAARTEvent;
		import collaboRhythm.iHAART.controller.IHAARTEventDispatcher;

		import collaboRhythm.iHAART.model.events.ContextableListEvent;


		[Bindable]
		private var contextDataProvider:ArrayCollection = new ArrayCollection(["Jean Dupont", "John Doe", "Mike Smith",
			"Jing Ming", "Esteban Garcia", "Eva Shlinberg", "Cecilia Grant", "Pat Bracken"]);

		public static const RECORD_BACKGROUND_COLOR:uint = 0xE6E7E8;

		private var _widgetContainers:Vector.<IVisualElementContainer> = new Vector.<IVisualElementContainer>();

		[Bindable]
		private var _applicationInfo:AboutApplicationModel = new AboutApplicationModel();
		[Bindable]
		private var _applicationController:IHAARTApplicationController;

		private var _httpService:HTTPService;
		private var _logger:ILogger;
		private var _settings:Settings;
		private var _gcmController:CloudMessagingController;
		private var _dbController:SQLStoreController;

		private var strTitle:String;

		override protected function createChildren():void
		{
			super.createChildren();

			if (_tabletApplicationController && _activeAccount)
			{
				init();
				(_tabletApplicationController as IHAARTApplicationController).useWidgetContainers();
			}
		}

		public function init():void
		{
//			var mainWidgetsGroup = new HGroup();
			_widgetContainers.push(mainWidgetsGroup);

			if (_tabletApplicationController && _tabletApplicationController.settings &&
					_tabletApplicationController.settings.debuggingToolsEnabled)
				initializeVersionWatermark();

		}

		private function handleAlertClick(event:CloseEvent):void
		{
			switch (event.detail)
			{
				case SkinnableAlert.OK:
					break;
				case SkinnableAlert.YES:
					break;
				case SkinnableAlert.NO:
					break;
				case SkinnableAlert.CANCEL:
					break;
				case SkinnableAlert.TAKE:
					SkinnableConfirmation.show("Are you sure? You won't be able to change this later.", "Confirm", SkinnableConfirmation.YES|SkinnableConfirmation.CANCEL, null, handleConfirmationClick);
					break;
				case SkinnableAlert.SNOOZE:
					break;
			}
		}

		private function handleConfirmationClick(event:CloseEvent):void
		{
			switch (event.detail)
			{
				case SkinnableConfirmation.OK:
					break;
				case SkinnableConfirmation.YES:
					applicationController.dbController.newAdherenceEvent(applicationController.settings.gcmAccount);
					SkinnableConfirmation.show("Saved", "Saved", SkinnableConfirmation.OK);
					break;
				case SkinnableConfirmation.CANCEL:
					break;
			}
		}

		private function initializeVersionWatermark():void
		{

		}

		private function checkPayload():void
		{
			var payload:String = FlexGlobals.topLevelApplication.applicationController.gcmController.checkPendingFromLaunchPayload();
			SkinnableAlert.show(payload, 'Payload');
		}

		private function schedule_loadedHandler(event:IHAARTEvent):void
		{
//			dbController.readAccountData(event.message);
		}

		function tempGetIndivoID():void
		{
			gcmController.requestCurrentIndivoRegistrationID();

		}

		//		Getters and Setters
		//		*******************
		//		*******************
		//		*******************
		//		*******************

		public function get applicationInfo():AboutApplicationModel
		{
			return _applicationInfo;
		}

		public function get applicationController():IHAARTApplicationController
		{
			if (!_applicationController)
			{
				_applicationController = FlexGlobals.topLevelApplication.applicationController;
			}
			return _applicationController;
		}

		public function get widgetContainers():Vector.<IVisualElementContainer>
		{
			return _widgetContainers;
		}

		public function get logger():ILogger
		{
			if (!_logger)
			{
				_logger = FlexGlobals.topLevelApplication.logger;
//				_logger = Log.getLogger(getQualifiedClassName(this).replace("::", "."));
			}
			return _logger;
		}

		public function set logger(value:ILogger):void
		{
			_logger = value;
		}

		public function get settings():Settings
		{
			if (!_settings)
			{
				_settings = FlexGlobals.topLevelApplication.applicationController.settings;
			}
			return _settings;
		}

		public function get gcmController():CloudMessagingController
		{
			if (!_gcmController)
			{
				_gcmController = FlexGlobals.topLevelApplication.applicationController.gcmController;
			}
			return _gcmController;
		}

		public function get dbController():SQLStoreController
		{
			if (!_dbController)
			{
				_dbController = FlexGlobals.topLevelApplication.dbController;
			}
			return _dbController;
		}

		protected function list_contextMenuItemClickHandler(event:ContextableListEvent):void
		{
			trace("bree in contextMenuClickHandler  ");
			if (event.menuItem.label == "Delete")
			{
				list.dataProvider.removeItemAt(event.itemIndex)
			}
		}

		private function toggleTools()
		{
			if (toolContainer.visible == true) {
				toolContainer.visible = false;
			} else {
				toolContainer.visible = true;
			}
		}

		]]></fx:Script>
	<!--<core:ConnectivityView id="_ConnectivityView" />-->
	<s:Panel id="overlayPanel" styleName="headerlessPanel" includeInLayout="true" visible="true"
			 		width="100%" height="100" horizontalCenter="0">
		<s:VGroup id="homeVGroup" includeInLayout="true" visible="true"
				  width="100%" height="100%" gap="10" horizontalCenter="0" horizontalAlign="center">
			<s:SkinnableContainer id="userInfoContainer" includeInLayout="true" visible="false"
								  width="100%" height="80"
								  styleName="gradientContainerStyle">
				<s:VGroup width="100%" height="100%">
					<s:Label id="userLabel" includeInLayout="true" visible="true"
							 width="100%" height="100%"
							 textAlign="right" verticalCenter="0"
							 fontFamily="MyriadProEmbeddedCFF" fontSize="36" fontWeight="bold" fontStyle="italic"/>  <!-- alignmentBaseline="ideographicBottom"  -->
				</s:VGroup>
			</s:SkinnableContainer>
			<s:SkinnableContainer id="mainContainer" includeInLayout="true" visible="false"
								  styleName="iHAARTContainerStyle" width="95%" height="100%" horizontalCenter="0">
				<s:VGroup horizontalCenter="0" horizontalAlign="center">
					<s:Button label="Toggle Tools" click="toggleTools();"/>
					<ihaart:ContextableList id="list" width="100%" height="100%"
										 contextMenuItemClick="list_contextMenuItemClickHandler(event)"
										 dataProvider="{contextDataProvider}">
						<ihaart:contextMenuItems>
							<fx:Object label="Delete"/>
							<fx:Object label="Cancel"/>
						</ihaart:contextMenuItems>
					</ihaart:ContextableList>
					<s:HGroup id="mainWidgetsGroup" includeInLayout="true" visible="false" width="10" height="10" gap="20"/>
				</s:VGroup>
			</s:SkinnableContainer>
			<s:SkinnableContainer id="toolContainer" includeInLayout="true" visible="false"
								  styleName="iHAARTContainerStyle" width="95%" height="100%" horizontalCenter="0">
				<s:VGroup horizontalCenter="0" horizontalAlign="center">
					<s:Button label="Set Alarm for 10 sec from now" click="gcmController.setAlarm();"/>
					<s:Button label="Get Server Registration ID"
							  click="gcmController.requestCurrentIndivoRegistrationID();"/>
					<s:Button label="Get Server Registration ID"
							  click="gcmController.requestCurrentIndivoRegistrationID();"/>
					<s:Button label="Test Alert Longer"
							  click="SkinnableAlert.show('A substance related to a flavor enhancer in soy sauce is among the next generation of medications being tested to fight HIV and may be more potent than current first-line therapies.', 'Taller', SkinnableAlert.TAKE|SkinnableAlert.CANCEL, null, handleAlertClick)"/>
					<s:Button label="Test Alert Shorter"
							  click="SkinnableAlert.show('A substance related to a flavor enhancer in soy sauce is among the next generation of medications', 'Shorter', SkinnableAlert.TAKE|SkinnableAlert.CANCEL, null, handleAlertClick)"/>
					<s:Button label="Check Payload" click="checkPayload()"/>
				</s:VGroup>
			</s:SkinnableContainer>
		</s:VGroup>
	</s:Panel>

<!--<s:SkinnableContainer width="97%" height="97%" styleName="iHAARTContainerStyle"> &lt;!&ndash;  verticalCenter="0"  &ndash;&gt;-->
				<!--<s:VGroup> &lt;!&ndash; horizontalAlign="center" &ndash;&gt;-->
					<!--<s:Button label="Get Server Registration ID"-->
					<!--click="gcmController.requestCurrentIndivoRegistrationID();"/>-->
					<!--<s:Button label="Update Indivo w Reg ID"-->
					<!--click="gcmController.updateStoredIndivoRegistrationID()"/>-->
					<!--<s:Button label="Check Payload"-->
							  <!--click="checkPayload()"/>-->
					<!--<s:Button label="Progress circle..."-->
							  <!--click="showProgressCircle();"/>-->
					<!--<s:Button label="Show Factoid"-->
							  <!--click="SkinnableAlert.show('A substance related to a flavor enhancer in soy sauce is among the next generation of medications being tested to fight HIV and may be more potent than current first-line therapies.', 'Alert Title', SkinnableAlert.OK|SkinnableAlert.CANCEL)"/>-->
					<!--<s:Button label="Show Alert YES/NO/CANCEL"-->
					<!--click="SkinnableAlert.show('Alert content', 'Alert Title', SkinnableAlert.YES|SkinnableAlert.NO|SkinnableAlert.CANCEL)"/>-->
					<!--<s:Label text="testing"/>-->
				<!--</s:VGroup>-->
		<!--</s:SkinnableContainer>-->
	<!--</s:Panel>-->
</tablet:TabletViewBase>