<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2010 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ViewMenu in a mobile application.  

@see spark.components.ViewMenu

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5">
    
    <fx:Metadata>
        <![CDATA[ 
        /** 
        * @copy spark.skins.spark.ApplicationSkin#hostComponent
        */
        [HostComponent("spark.components.ViewMenu")]
        ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
		import mx.core.DPIClassification;
		import mx.core.FlexGlobals;
		import mx.core.IVisualElement;
		import mx.core.UIComponent;
		import mx.events.FlexEvent;

		import spark.components.View;

		import spark.components.ViewMenu;
		import spark.components.ViewNavigatorApplication;

		import spark.components.supportClasses.GroupBase;
		import spark.effects.easing.Power;


		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			// TODO: eliminate this workaround for an unhandled exception in PopUpManagerImpl.addModalPopUpAccessibility
			if (hostComponent.accessibilityProperties == null)
				hostComponent.accessibilityProperties = new AccessibilityProperties();

			useChromeColor = false;
			super.initializationComplete();
		}

		/**
		 *  @copy spark.skins.mobile.supportClasses.MobileSkin#applicationDPI
		 */
		public function get applicationDPI():int
		{
			return FlexGlobals.topLevelApplication.applicationDPI;
		}

		/**
		 *  @private
		 */
		override protected function measure():void
		{
			super.measure();

			// not actually used in normal situations, but
			// is here to prevent bug 28950 if ViewMenu is misused
			measuredHeight = 200;
		}

		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			super.updateDisplayList(unscaledWidth, unscaledHeight);

			var separatorWeight:Number = 1;
			var strokeWeight:Number = 2;
			var borderWeight:Number = 3;

			if (applicationDPI == DPIClassification.DPI_320)
			{
				separatorWeight = 4;
				strokeWeight = 6;
				borderWeight = 8;
			}
			else if (applicationDPI == DPIClassification.DPI_240)
			{
				separatorWeight = 2;
				strokeWeight = 3;
				borderWeight = 4;
			}

			background.radiusX = strokeWeight + borderWeight;

			dividerStroke.weight = strokeWeight;
			dividerLine.left = borderWeight;
			dividerLine.right = borderWeight;
			dividerLine.y = borderWeight + 1;

			contentGroup.top = strokeWeight + borderWeight;
			contentGroup.bottom = borderWeight;
			contentGroup.left = borderWeight;
			contentGroup.right = borderWeight;

			contentGroupLayout.verticalGap = separatorWeight;
		}

		private function getActionBarHeight():Number
		{
			var application:ViewNavigatorApplication = mx.core.FlexGlobals.topLevelApplication as ViewNavigatorApplication;
			if (application)
			{
				if (application.navigator && application.navigator.activeView && application.navigator.activeView.actionBarVisible)
				{
					if (application.navigator.actionBar)
						return application.navigator.actionBar.height;
				}
			}

			return 0;
		}
		]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal"                          stateGroups="openedGroup"/>
        <s:State name="closed"                          stateGroups="closedGroup"/>
        <s:State name="disabled"                        stateGroups="openedGroup"/>
        <s:State name="normalAndLandscape"              stateGroups="openedGroup, landscapeGroup"/>
        <s:State name="closedAndLandscape"              stateGroups="closedGroup, landscapeGroup"/>
        <s:State name="disabledAndLandscape"            stateGroups="openedGroup, landscapeGroup" />
    </s:states>
    
    <s:transitions>
        <s:Transition fromState="closed" toState="normal" autoReverse="true">
			<s:Fade target="{chromeGroup}" duration="150" easer="{new Power(0.5, 3)}" />
        </s:Transition>
        
        <s:Transition fromState="closedAndLandscape" toState="normalAndLandscape" autoReverse="true">
			<s:Fade target="{chromeGroup}" duration="150" easer="{new Power(0.5, 3)}" />
        </s:Transition>

        <s:Transition fromState="normal" toState="closed" autoReverse="true">
			<s:Fade target="{chromeGroup}" duration="100"/>
        </s:Transition>

        <s:Transition fromState="normalAndLandscape" toState="closedAndLandscape" autoReverse="true">
			<s:Fade target="{chromeGroup}" duration="100"/>
        </s:Transition>
    </s:transitions>

    <!-- The ViewMenu and its skin are sized to the application.
         The menu chrome is a separate group that is anchored to the bottom of the skin. -->

    <s:Group id="chromeGroup"
             right="0"
             top="{getActionBarHeight()}"
			 minWidth="150"
             visible.closedGroup="false"
			>
        
        <!-- Background -->
        <s:Rect left="0" right="0" top="0" bottom="0" id="background" radiusX="8">
            <s:fill> 
                <s:SolidColor color="#000000" alpha=".3"/>
            </s:fill>
        </s:Rect>
        
		<!-- Divider line -->
		<s:Line left="5" right="5" y="5" id="dividerLine">
			<s:stroke>
				<s:SolidColorStroke id="dividerStroke" weight="3" color="#AAAAFF" alpha="0.9"/>
			</s:stroke>
		</s:Line>

        <!--
        Note: setting the minimum size to 0 here so that changes to the host component's
        size will not be thwarted by this skin part's minimum size.   This is a compromise,
        more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
        -->
        <!--- @copy spark.components.SkinnableContainer#contentGroup -->
        <s:Group id="contentGroup" left="0" right="0" top="0" bottom="0" minWidth="0" minHeight="0" width="100%">
            <s:layout>
                <s:TileLayout id="contentGroupLayout" verticalGap="1" requestedColumnCount="1" columnAlign="justifyUsingWidth"
                                  />
            </s:layout>
        </s:Group>    
    </s:Group>
</s:SparkSkin>
