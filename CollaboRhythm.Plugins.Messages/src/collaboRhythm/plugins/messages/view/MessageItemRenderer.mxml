<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:view="collaboRhythm.plugins.messages.view.*"
				autoDrawBackground="false"
				currentState="unknown"
				height="100">
	<fx:Declarations>
		<s:DateTimeFormatter id="dateTimeFormatter"
							 dateTimePattern="M-dd-yyyy h:mm a"/>
	</fx:Declarations>
	<s:states>
		<s:State name="unknown"/>
		<s:State name="sentText" stateGroups="sent, text"/>
		<s:State name="inboxText" stateGroups="inbox, text"/>
		<s:State name="sentVideo" stateGroups="sent, video"/>
		<s:State name="inboxVideo" stateGroups="inbox, video"/>
	</s:states>
	<fx:Style>
		#bodyLabel {
			font-size: 16;
		}

		#timeStampLabel {
			font-size: 15;
			color: #939598;
		}
	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.shared.model.healthRecord.document.Message;
		import collaboRhythm.shared.model.healthRecord.document.MessageStatusCodes;
		import collaboRhythm.shared.model.services.IImageCacheService;
		import collaboRhythm.shared.model.services.WorkstationKernel;

		public static const ACCOUNT_IMAGES_API_URL_BASE:String = "http://www.mit.edu/~jom/temp/accountImages/";
		private static const FAILED_TO_SEND_MESSAGE:String = "failed to send.";
		private static const SENDING_MESSAGE:String = "sending...";

		[Bindable]
		private var _message:Message;
		private var _netStreamLocation:String;

		override public function set data(value:Object):void
		{
			super.data = value;

			var imageCacheService:IImageCacheService = WorkstationKernel.instance.resolve(IImageCacheService) as
					IImageCacheService;

			_netStreamLocation = "";

			_message = value as Message;

			var stateString:String = "";

			if (_message)
			{
				if (_message.type == Message.SENT)
				{
					stateString = "sent";
				}
				else if (_message.type == Message.INBOX)
				{
					stateString = "inbox";
				}

				senderImage.source = imageCacheService.getImage(senderImage, imageURI(_message.sender));

				if (_message.body)
				{
					var regExp:RegExp = /<.+>/;
					var array:Array = _message.body.match(regExp);
					if (array != null && array.length != 0)
					{
						var rawNetStreamLocation:String = array[0];
						_netStreamLocation = rawNetStreamLocation.substr(1, rawNetStreamLocation.length - 2);
					}
				}

				dispatchEvent(new MessageItemRendererEvent(MessageItemRendererEvent.MESSAGE_ITEM_RENDERER_VIEWED,
						_message));

				if (_netStreamLocation)
				{
					currentState = stateString + "Video";
				}
				else
				{
					currentState = stateString + "Text";
				}
			}
		}

		public function imageURI(sender:String):String
		{
			return accountIdPrefix(sender) ? ACCOUNT_IMAGES_API_URL_BASE + accountIdPrefix(sender) + ".jpg" : null;
		}

		private function accountIdPrefix(sender:String):String
		{
			return sender ? sender.split("@")[0] : null;
		}

		private function playVideoButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new VideoActionEvent(VideoActionEvent.PLAY_VIDEO, _netStreamLocation));
		}

		private function formatTimeStampLabel(received_at:Date, localStatus:String):String
		{
			if (localStatus == MessageStatusCodes.COMPLETE)
			{
				return dateTimeFormatter.format(received_at);
			}
			else if (localStatus == MessageStatusCodes.FAILED)
			{
				return FAILED_TO_SEND_MESSAGE;
			}
			else if (localStatus == MessageStatusCodes.SENDING)
			{
				return SENDING_MESSAGE;
			}
			else
			{
				// unhandled status
				return "invalid message status";
			}
		}
		]]></fx:Script>
	<s:Image id="senderImage" height="{this.height}" width="{this.height}" left.sent="null" right.sent="0"
			 left.inbox="0" right.inbox="null"/>
	<s:VGroup id="messageVGroup" top="10" gap="10" left.sent="null" right.sent="{this.height + 10}"
			  left.inbox="{this.height + 10}" right.inbox="null" horizontalAlign.sent="right"
			  horizontalAlign.inbox="left">
		<s:Group id="playVideoButtonGroup" width="60" height="60" includeIn="video">
			<s:Button width="100%" height="100%"
					  skinClass="collaboRhythm.shared.view.skins.HomeTransparentNavigationButtonSkin"
					  click="playVideoButton_clickHandler(event)"/>
			<view:VideoIconDark width="45" height="45" horizontalCenter="0" verticalCenter="0" mouseEnabled="false"
								mouseChildren="false"/>
			<view:PlayButton width="60" height="60" horizontalCenter="0" verticalCenter="0" mouseEnabled="false"
							 mouseChildren="false"/>
		</s:Group>
		<s:Label id="bodyLabel" text="{_message.body}" width="{this.width - 140}" maxDisplayedLines="3" includeIn="text"
				 textAlign.sent="right" textAlign.inbox="left"/>
		<s:Label id="timeStampLabel" text="{formatTimeStampLabel(_message.received_at, _message.localStatus)}"
				 textAlign.sent="right"
				 textAlign.inbox="left"/>
	</s:VGroup>
	<s:Line width="100%" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x666666"/>
		</s:stroke>
	</s:Line>
</s:ItemRenderer>
