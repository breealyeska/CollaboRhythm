<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<tablet:TabletViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:tablet="collaboRhythm.shared.view.tablet.*"
					   xmlns:view="collaboRhythm.plugins.messages.view.*"
					   creationComplete="creationCompleteHandler(event)"
					   title="Messages View">
	<fx:Style>
		#messageTextInput {
			fontSize: 20;
		}
	</fx:Style>
	<fx:Declarations>
		<s:Button id="refreshMessagesButton" width="44" height="46" click="refreshMessagesButton_clickHandler(event)">
			<s:icon>
				<view:SynchronizeIcon id="synchronizeIcon" width="26" height="26"/>
			</s:icon>
		</s:Button>
		<s:Button id="simulateDisconnectButton" width="44" height="46" click="simulateDisconnectButton_clickHandler(event)">
			<s:icon>
				<view:SimulateDisconnectIcon id="simulateDisconnectIcon" width="26" height="26"/>
			</s:icon>
		</s:Button>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.messages.controller.MessagesAppController;
		import collaboRhythm.plugins.messages.model.MessagesModelAndController;
		import collaboRhythm.shared.collaboration.model.CollaborationLobbyNetConnectionServiceProxy;
		import collaboRhythm.shared.collaboration.model.CollaborationModel;
		import collaboRhythm.shared.model.healthRecord.document.Message;
		import collaboRhythm.shared.model.healthRecord.document.MessagesModel;

		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.FlexEvent;

		import spark.collections.Sort;
		import spark.collections.SortField;
		import spark.events.TextOperationEvent;

		[Bindable]
		private var _messagesModel:MessagesModel;
		private var _messagesAppController:MessagesAppController;
		private var _videoAttachmentLocation:String;
		private var _collaborationLobbyNetConnectionServiceProxy:CollaborationLobbyNetConnectionServiceProxy;

		override public function set data(value:Object):void
		{
			super.data = value;

			var messagesModelAndController:MessagesModelAndController = value as MessagesModelAndController;

			_messagesModel = messagesModelAndController.messagesModel;
			_messagesAppController = messagesModelAndController.messagesAppController;

			_collaborationLobbyNetConnectionServiceProxy = _messagesAppController.collaborationLobbyNetConnectionServiceProxy as
					CollaborationLobbyNetConnectionServiceProxy;

			_messagesModel.messages.addEventListener(CollectionEvent.COLLECTION_CHANGE,
					messagesCollection_changeHandler);

			addEventListener(MessageItemRendererEvent.MESSAGE_ITEM_RENDERER_VIEWED, messageItemRendererViewedEvent);
		}

		private function messageItemRendererViewedEvent(event:MessageItemRendererEvent):void
		{
			_messagesAppController.handleMessageViewed(event.message);
		}

		private function playVideoHandler(event:VideoActionEvent):void
		{
			_messagesAppController.playVideoMessage(event.netStreamLocation);
		}

		private function messagesCollection_changeHandler(event:CollectionEvent):void
		{
			if (event.kind == CollectionEventKind.ADD)
			{
				messagesList.dataGroup.verticalScrollPosition = messagesList.dataGroup.contentHeight;
			}
		}

		override protected function createChildren():void
		{
			super.createChildren();

			var isDebugger:Boolean = Capabilities.isDebugger;
			var playerType:String = Capabilities.playerType;

			if (playerType == "Desktop" && isDebugger)
			{
				actionContent.unshift(refreshMessagesButton);
				actionContent.unshift(simulateDisconnectButton);
			}
		}

		private function creationCompleteHandler(event:FlexEvent):void
		{
			messagesList.addEventListener(VideoActionEvent.PLAY_VIDEO, playVideoHandler);

			var sort:Sort = new Sort();
			sort.fields = [new SortField("received_at")];
			_messagesModel.messages.sort = sort;
			_messagesModel.messages.refresh();

			callLater(scrollToEnd);
		}

		private function scrollToEnd():void
		{
			messagesList.dataGroup.verticalScrollPosition = messagesList.dataGroup.contentHeight - messagesList.height;
		}

		private function sendButton_clickHandler():void
		{
			_messagesAppController.createAndSendMessage(messageTextInput.text);
			messageTextInput.text = "";
		}

		private function videoButton_clickHandler():void
		{
			_messagesAppController.recordVideoMessage();
		}

		// Prevent entering newline characters in messages. Instead, hitting return closes the soft keyboard.
		// Unfortunately, setting the label for the return key doesn't work on all android devices and listening
		// for the return key does not work either.
		//
		// Also prevent sending messages with no text by disabling the sendButton.
		private function messageTextInput_changeHandler(event:TextOperationEvent):void
		{
			sendButtonGroup.enabled = (messageTextInput.text.length != 0);

			if (messageTextInput.text.charAt(messageTextInput.text.length - 1) == "\n")
			{
				messageTextInput.text = messageTextInput.text.slice(0, messageTextInput.text.length - 1);
			}
		}

		private function refreshMessagesButton_clickHandler(event:MouseEvent):void
		{
//			_messagesModel.
		}

		private function simulateDisconnectButton_clickHandler(event:MouseEvent):void
		{
			_messagesAppController.simulateDisconnect();
		}
		]]></fx:Script>
	<s:VGroup width="100%" height="100%" gap="0">
		<s:List id="messagesList" width="100%" height="100%" dataProvider="{_messagesModel.messages}"
				itemRenderer="collaboRhythm.plugins.messages.view.MessageItemRenderer" interactionMode="touch"
				horizontalScrollPolicy="off"/>
		<s:Group width="100%" height="100">
			<s:Line width="100%" top="0">
				<s:stroke>
					<s:SolidColorStroke color="0x666666"/>
				</s:stroke>
			</s:Line>
			<s:HGroup left="10" right="10" top="10" bottom="10" gap="20">
				<s:TextArea id="messageTextInput" height="100%" width="100%"
							skinClass="spark.skins.mobile.StageTextAreaSkin"
							autoCapitalize="{AutoCapitalize.SENTENCE}" autoCorrect="true" change="messageTextInput_changeHandler(event)"/>
				<s:Group id="sendButtonGroup" height="100%" width="80" enabled="false">
					<s:Button id="sendButton" height="100%" width="100%"
							  skinClass="collaboRhythm.shared.view.skins.HomeTransparentNavigationButtonSkin"
							  click="sendButton_clickHandler()"/>
					<view:SendIcon left="10" top="10" mouseEnabled="false" mouseChildren="false"/>
				</s:Group>
				<s:Group height="100%" width="80"
						 visible="{_collaborationLobbyNetConnectionServiceProxy.collaborationState != CollaborationModel.COLLABORATION_ACTIVE}">
					<s:Button height="100%" width="100%"
							  skinClass="collaboRhythm.shared.view.skins.HomeTransparentNavigationButtonSkin"
							  click="videoButton_clickHandler()"/>
					<view:VideoIconDark left="10" top="10" mouseEnabled="false" mouseChildren="false"/>
				</s:Group>
			</s:HGroup>
			<s:Rect>
				<s:fill>
					<s:SolidColor color="0x333333"/>
				</s:fill>
			</s:Rect>
		</s:Group>
	</s:VGroup>
</tablet:TabletViewBase>
