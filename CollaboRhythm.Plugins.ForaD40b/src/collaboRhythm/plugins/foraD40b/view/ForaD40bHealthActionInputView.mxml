<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<tablet:TabletViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:view="collaboRhythm.plugins.foraD40b.view.*"
					   xmlns:tablet="collaboRhythm.shared.view.tablet.*"
					   implements="collaboRhythm.plugins.schedule.shared.model.IHealthActionInputView"
					   creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<s:Button id="saveActionButton" label="Save" enabled="false" click="saveButton_clickHandler()"/>
		<s:DateTimeFormatter id="timeFormatter" dateTimePattern="h a"/>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.foraD40b.controller.ForaD40bHealthActionInputController;
		import collaboRhythm.plugins.foraD40b.model.ForaD40bHealthActionInputModelCollection;
		import collaboRhythm.plugins.schedule.shared.model.HealthActionInputModelAndController;
		import collaboRhythm.plugins.schedule.shared.model.IHealthActionInputController;
		import collaboRhythm.shared.model.services.ICurrentDateSource;
		import collaboRhythm.shared.model.services.WorkstationKernel;

		import mx.binding.utils.BindingUtils;
		import mx.events.FlexEvent;

		[Bindable]
		protected var _dataInputModel:ForaD40bHealthActionInputModelCollection;
		protected var _dataInputController:ForaD40bHealthActionInputController;
		private var _currentDateSource:ICurrentDateSource;

		override public function set data(value:Object):void
		{
			super.data = value;

			var dataInputModelAndController:HealthActionInputModelAndController = value as
					HealthActionInputModelAndController;

			_dataInputModel = dataInputModelAndController.healthActionInputModel as
					ForaD40bHealthActionInputModelCollection;
			_dataInputController = dataInputModelAndController.healthActionInputController as
					ForaD40bHealthActionInputController;

			_currentDateSource = WorkstationKernel.instance.resolve(ICurrentDateSource) as ICurrentDateSource;
		}

		override protected function createChildren():void
		{
			super.createChildren();
			if (_dataInputModel.isReview)
			{
				title = "Review " + _dataInputModel.scheduleItemOccurrence.scheduleItem.name.text + " - Scheduled (" +
						timeFormatter.format(_dataInputModel.scheduleItemOccurrence.dateStart) + " to " +
						timeFormatter.format(_dataInputModel.scheduleItemOccurrence.dateEnd) + ")";
				saveButton.visible = false;
			}
			else if (_dataInputModel.scheduleItemOccurrence)
			{
				title = "Report " + _dataInputModel.scheduleItemOccurrence.scheduleItem.name.text + " - Scheduled (" +
						timeFormatter.format(_dataInputModel.scheduleItemOccurrence.dateStart) + " to " +
						timeFormatter.format(_dataInputModel.scheduleItemOccurrence.dateEnd) + ")";
				actionContent.unshift(saveActionButton);
			}
			else
			{
				title = "Report " + _dataInputController.healthAction.name + " Measurement - Unscheduled";
				actionContent.unshift(saveActionButton);
			}
		}

		private function creationCompleteHandler(event:FlexEvent):void
		{
			reportForaD40bDetailedView.init(_dataInputModel, _dataInputController);

			saveActionButton.enabled = saveButton.enabled = false;

			BindingUtils.bindSetter(setManualBloodGlucose, _dataInputModel.firstBloodGlucoseInputModel,
					"manualBloodGlucose");
			BindingUtils.bindSetter(setDeviceBloodGlucose, _dataInputModel.firstBloodGlucoseInputModel,
					"deviceBloodGlucose");
		}

		private function setManualBloodGlucose(manualBloodGlucose:String):void
		{
			if (manualBloodGlucose == "")
			{
				saveActionButton.enabled = saveButton.enabled = false;
			}
			else if (manualBloodGlucose != "" &&
					_dataInputModel.healthActionModelDetailsProvider.accountId ==
							_dataInputModel.healthActionModelDetailsProvider.activeAccount.accountId)
			{
				saveActionButton.enabled = saveButton.enabled = true;
			}
		}

		private function setDeviceBloodGlucose(deviceBloodGlucose:String):void
		{
			if (deviceBloodGlucose != "" &&
					_dataInputModel.healthActionModelDetailsProvider.accountId ==
							_dataInputModel.healthActionModelDetailsProvider.activeAccount.accountId)
			{
				saveActionButton.enabled = saveButton.enabled = !_dataInputModel.firstInputModel.isDuplicate;
			}
		}

		public function get healthActionInputController():IHealthActionInputController
		{
			return _dataInputController;
		}

		private function saveButton_clickHandler():void
		{
			_dataInputController.createAndSubmitResults();
		}

		override public function homeButton_clickHandler():void
		{
			_dataInputController.removeCollaborationViewSynchronizationEventListener();

			super.homeButton_clickHandler();
		}

		override protected function stage_keyUpHandler(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.BACK)
			{
				_dataInputController.removeCollaborationViewSynchronizationEventListener();
			}

			super.stage_keyUpHandler(event);
		}
		]]></fx:Script>
	<view:ReportForaD40bDetailedView id="reportForaD40bDetailedView"
									 height="{footerGroup.y - reportForaD40bDetailedView.y}"/>
	<s:Group id="footerGroup" width="100%" bottom="0">
		<s:Rect width="100%" height="100%" visible="{_dataInputModel.reportForaD40bItemDataCollection.length > 1}">
			<s:fill>
				<s:SolidColor color="0xFFFFFF"/>
			</s:fill>
		</s:Rect>
		<s:VGroup paddingTop="10" paddingBottom="{_dataInputModel.reportForaD40bItemDataCollection.length > 1 ? 10 : 90}" width="100%" horizontalAlign="center">
			<s:Button id="saveButton" label="Save"
					  enabled="false" click="saveButton_clickHandler()"/>
		</s:VGroup>
	</s:Group>
</tablet:TabletViewBase>