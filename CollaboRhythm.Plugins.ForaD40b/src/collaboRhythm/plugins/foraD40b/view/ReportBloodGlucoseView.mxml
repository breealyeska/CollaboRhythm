<?xml version="1.0"?>
<!---
 - Copyright 2012 John Moore, Scott Gilroy
 -
 - This file is part of CollaboRhythm.
 -
 - CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 - License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
 - version.
 -
 - CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 - warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 - details.
 -
 - You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
 - <http://www.gnu.org/licenses/>.
-->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:view="collaboRhythm.plugins.foraD40b.view.*"
		 gap="15" verticalAlign="middle"
		 creationComplete="creationCompleteHandler()"
		 baselinePositionElement="{bloodGlucoseGroup}"
		>
	<s:states>
		<s:State name="reportDevice"/>
		<s:State name="reportManual"/>
		<s:State name="review"/>
	</s:states>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";

		.unitsText {
			fontSize: 40;
		}

		.textInputText {
			fontSize: 110;
		}

	</fx:Style>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.foraD40b.controller.BloodGlucoseHealthActionInputController;
		import collaboRhythm.plugins.foraD40b.model.BloodGlucoseHealthActionInputModel;
		import collaboRhythm.shared.model.StringUtils;
		import collaboRhythm.shared.model.healthRecord.document.VitalSign;
		import collaboRhythm.shared.model.services.ICurrentDateSource;
		import collaboRhythm.shared.model.services.WorkstationKernel;

		import mx.binding.utils.BindingUtils;
		import mx.core.IVisualElement;

		import spark.skins.mobile.TextInputSkin;

		private static const SINGLE_VALUE_FONT_SIZE:Number = 110;
		private static const MULTIPLE_VALUES_FONT_SIZE:Number = 60;
		private static const BLOOD_GLUCOSE_VALUE_WIDTH:Number = 190;
		private static const BLOOD_GLUCOSE_VALUE_HEIGHT:Number = 130;

		[Bindable]
		protected var _dataInputModel:BloodGlucoseHealthActionInputModel;
		protected var _dataInputController:BloodGlucoseHealthActionInputController;
		private var _currentDateSource:ICurrentDateSource;

		[Bindable]
		private var _valueSizeScale:Number = 1;
		private var _propertiesChanged:Boolean;

		public function init(dataInputModel:BloodGlucoseHealthActionInputModel,
							 dataInputController:BloodGlucoseHealthActionInputController):void
		{
			_dataInputModel = dataInputModel;
			_dataInputController = dataInputController;

			BindingUtils.bindSetter(reportBloodGlucoseItemDataCollection_length_setterHandler,
					_dataInputModel.bloodGlucoseHealthActionInputModelCollection.reportBloodGlucoseItemDataCollection,
					"length", false, true);
			BindingUtils.bindSetter(dataInputModel_deviceBloodGlucose_setterHandler,
					_dataInputModel,
					"deviceBloodGlucose", false, true);
			propertiesChanged = true;
		}

		private function reportBloodGlucoseItemDataCollection_length_setterHandler(length:Number):void
		{
			var valueFontSize:Number = length > 1 ? MULTIPLE_VALUES_FONT_SIZE : SINGLE_VALUE_FONT_SIZE;
			var style:CSSStyleDeclaration = this.styleManager.getStyleDeclaration(".textInputText");
			if (style.getStyle("fontSize") != valueFontSize)
			{
				style.setStyle("fontSize", valueFontSize);
				this.styleManager.setStyleDeclaration(".textInputText", style, true);
			}

			_valueSizeScale = valueFontSize / SINGLE_VALUE_FONT_SIZE;
		}

		private function dataInputModel_deviceBloodGlucose_setterHandler(value:String):void
		{
			propertiesChanged = true;
		}

		override protected function stateChanged(oldState:String, newState:String, recursive:Boolean):void
		{
			super.stateChanged(oldState, newState, recursive);
			propertiesChanged = true;
			trace(this.className, _dataInputModel ? _dataInputModel.dateMeasuredStart.toString() : "", "oldState",
					oldState, "newState", newState);
		}

		private function creationCompleteHandler():void
		{
			propertiesChanged = true;
		}

		override protected function commitProperties():void
		{
			super.commitProperties();
			if (propertiesChanged)
			{
				updateChildren();
				propertiesChanged = false;
			}
		}

		private function softKeyboardDeactivateHandler(event:SoftKeyboardEvent):void
		{
			// the back button closes the application if the TextInput has focus, so set the focus to something else
			bloodGlucoseGroup.setFocus();
		}

		private function setManualBloodGlucose(manualBloodGlucose:String):void
		{
			if (bloodGlucoseTextInput)
			{
				bloodGlucoseTextInput.text = manualBloodGlucose;
			}
		}

		private function setDeviceBloodGlucose(deviceBloodGlucose:String):void
		{
			if (_dataInputModel.isFromDevice)
			{
				showDeviceBloodGlucose();
			}
		}

		private function handleInvalidBloodGlucose(invalidBloodGlucose:Boolean):void
		{
			if (invalidBloodGlucose)
			{
				//TODO: Decide whether to show an alert or flash the text box
			}
		}

		private function showDeviceBloodGlucose():void
		{
			if (reportedBloodGlucoseLabel)
			{
				reportedBloodGlucoseLabel.text = _dataInputModel.deviceBloodGlucose;
			}
		}

		private function bloodGlucoseTextInput_changeHandler():void
		{
			if (bloodGlucoseTextInput.enabled)
			{
				_dataInputController.updateManualBloodGlucose(bloodGlucoseTextInput.text);
			}
		}

		private function updateState():void
		{
			if (_dataInputModel)
			{
				if (_dataInputModel.scheduleItemOccurrence && _dataInputModel.scheduleItemOccurrence.adherenceItem &&
						_dataInputModel.currentView == BloodGlucoseHealthActionInputView)
				{
					currentState = "review";
				}
				else
				{
					if (_dataInputModel.isFromDevice)
						currentState = "reportDevice";
					else
						currentState = "reportManual";
				}
			}
		}

		private function updateChildren():void
		{
			if (_dataInputModel)
			{
				if (_dataInputModel.currentView == BloodGlucoseHealthActionInputView)
				{
					glucometerImage.visible = false;
					glucometerImage.includeInLayout = false;
				}

				if (_dataInputModel.scheduleItemOccurrence && _dataInputModel.scheduleItemOccurrence.adherenceItem &&
						_dataInputModel.currentView == BloodGlucoseHealthActionInputView)
				{
					if (_dataInputModel.scheduleItemOccurrence.adherenceItem.adherenceResults &&
							_dataInputModel.scheduleItemOccurrence.adherenceItem.adherenceResults.length != 0)
					{
						var bloodGlucoseVitalSign:VitalSign = _dataInputModel.scheduleItemOccurrence.adherenceItem.adherenceResults[0] as
								VitalSign;
						if (bloodGlucoseVitalSign && reportedBloodGlucoseLabel)
						{
							reportedBloodGlucoseLabel.text = bloodGlucoseVitalSign.result.value;
						}

						if (bloodGlucoseVitalSign.comments != BloodGlucoseHealthActionInputModel.SELF_REPORT &&
								wirelessIcon)
						{
							wirelessIcon.visible = true;
						}
					}
				}
				else
				{
					setDeviceBloodGlucose(_dataInputModel.deviceBloodGlucose);

					if (_dataInputModel.healthActionModelDetailsProvider.accountId !=
							_dataInputModel.healthActionModelDetailsProvider.activeAccount.accountId &&
							bloodGlucoseTextInput)
					{
						bloodGlucoseTextInput.enabled = false;
					}

					BindingUtils.bindSetter(setManualBloodGlucose, _dataInputModel, "manualBloodGlucose");
					BindingUtils.bindSetter(setDeviceBloodGlucose, _dataInputModel, "deviceBloodGlucose");
					BindingUtils.bindSetter(handleInvalidBloodGlucose, _dataInputModel, "invalidBloodGlucose");
				}

				if (bloodGlucoseTextInput)
				{
					bloodGlucoseTextInput.addEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE,
							softKeyboardDeactivateHandler);
				}
			}
		}

		public function get propertiesChanged():Boolean
		{
			return _propertiesChanged;
		}

		public function set propertiesChanged(value:Boolean):void
		{
			_propertiesChanged = value;
			if (propertiesChanged)
			{
				updateState();
				invalidateProperties();
			}
		}
		]]></fx:Script>
	<s:Image id="glucometerImage" source="http://www.mit.edu/~jom/temp/equipment/FORA D40b.png"
			 width="140" height="140"
			 smooth="true"/>
	<view:WirelessIcon id="wirelessIcon" visible="{_dataInputModel.isFromDevice}" scaleX="{_valueSizeScale}" scaleY="{_valueSizeScale}"/>
	<s:HGroup id="bloodGlucoseGroup" gap="15" verticalAlign.reportManual="middle" verticalAlign="baseline" baselinePositionElement="{unitsLabel}">
		<s:TextInput id="bloodGlucoseTextInput"
					 width="{BLOOD_GLUCOSE_VALUE_WIDTH * _valueSizeScale}" height="{BLOOD_GLUCOSE_VALUE_HEIGHT * _valueSizeScale}"
					 skinClass="spark.skins.mobile.StageTextInputSkin"
					 styleName="textInputText"
					 contentBackgroundAlpha="1"
					 textAlign="right"
					 restrict="0-9" maxChars="3" softKeyboardType="number"
					 change="bloodGlucoseTextInput_changeHandler()" needsSoftKeyboard="true"
					 includeIn="reportManual"/>
		<s:Label id="reportedBloodGlucoseLabel"
				 width="{BLOOD_GLUCOSE_VALUE_WIDTH * _valueSizeScale}"
				 styleName="textInputText"
				 textAlign="right"
				 includeIn="review,reportDevice"/>
		<s:Label id="unitsLabel" text="mg/dL" verticalCenter="2" styleName="unitsText"/>
<!--
		<s:Label id="dataSourceInfoLabel" text="{_dataInputModel.urlVariables.dataSourceInfo}" includeInLayout="{!StringUtils.isEmpty(_dataInputModel.urlVariables.dataSourceInfo)}" />
-->
	</s:HGroup>
</s:HGroup>
